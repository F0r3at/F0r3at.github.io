<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>每周一洞 on F0rmat的博客 | 专注于网络攻防和信息安全</title>
    <link>https://getshe11.com/tags/%E6%AF%8F%E5%91%A8%E4%B8%80%E6%B4%9E/</link>
    <description>Recent content in 每周一洞 on F0rmat的博客 | 专注于网络攻防和信息安全</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Mon, 17 Sep 2018 13:16:06 +0000</lastBuildDate><atom:link href="https://getshe11.com/tags/%E6%AF%8F%E5%91%A8%E4%B8%80%E6%B4%9E/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>yxcms 1.4.7 最新版漏洞分析</title>
      <link>https://getshe11.com/post/yxcms-1.4.7-latest-version-of-vulnerability-analysis/</link>
      <pubDate>Mon, 17 Sep 2018 13:16:06 +0000</pubDate>
      
      <guid>https://getshe11.com/post/yxcms-1.4.7-latest-version-of-vulnerability-analysis/</guid>
      <description>0x01前言 在先知看到的，大部分都是后台漏洞，部分厂商对于后台的漏洞都不认可，因为厂商觉得能进入后台这些漏洞都不是漏洞。最恐怖的是厂商否认了漏洞存在，然后偷偷的去修复。
0x02 安装程序 具体的安装和使用的详细可以上官网查看https://www.kancloud.cn/yongheng/yxcms
0x03 前台XSS 1.漏洞复现  打开链接http://sb.com/index.php?r=default/column/index&amp;amp;col=guestbook 输入payload：&amp;lt;svg/onload=alert(1)&amp;gt;    然后登陆后台，查看审核 点击编辑   2.漏洞分析  前台的文件源码protected/apps/default/controller/columnController.php  public function index() { $ename=in($_GET[&amp;#39;col&amp;#39;]); if(empty($ename)) throw new Exception(&amp;#39;栏目名不能为空~&amp;#39;, 404); $sortinfo=model(&amp;#39;sort&amp;#39;)-&amp;gt;find(&amp;#34;ename=&amp;#39;{$ename}&amp;#39;&amp;#34;,&amp;#39;id,name,ename,path,url,type,deep,method,tplist,keywords,description,extendid&amp;#39;); $path=$sortinfo[&amp;#39;path&amp;#39;].&amp;#39;,&amp;#39;.$sortinfo[&amp;#39;id&amp;#39;]; $deep=$sortinfo[&amp;#39;deep&amp;#39;]+1; $this-&amp;gt;col=$ename; switch ($sortinfo[&amp;#39;type&amp;#39;]) { case 1://文章 $this-&amp;gt;newslist($sortinfo,$path,$deep); break; case 2://图集 $this-&amp;gt;photolist($sortinfo,$path,$deep); break; case 3://单页 $this-&amp;gt;page($sortinfo,$path,$deep); break; case 4://应用 break; case 5://自定义 break; case 6://表单 $this-&amp;gt;extend($sortinfo,$path,$deep); break; default: throw new Exception(&amp;#39;未知的栏目类型~&amp;#39;, 404); break; } }  后台的文件源码protected/apps/admin/controller/extendfieldController.</description>
    </item>
    
    <item>
      <title>CVE-2018-1000094-CMSMS 2.2.5代码执行漏洞(每周一洞)</title>
      <link>https://getshe11.com/post/cve-2018-1000094-cmsms-2.2.5-code-execution-vulnerability/</link>
      <pubDate>Sat, 11 Aug 2018 09:31:30 +0000</pubDate>
      
      <guid>https://getshe11.com/post/cve-2018-1000094-cmsms-2.2.5-code-execution-vulnerability/</guid>
      <description>0x01 前言 CMS Made Simple是一个简单易于使用的内容管理系统。它使用PHP，MySQL和Smarty模板引擎开发。
昨天看漏洞库的时候看到这一款CMS，漏洞操作也挺简单的，但是可以申请CVE，于是乎就复现了一篇过程和写漏洞脚本。
0x02 环境  下载下来是一个安装文件cmsms-2.2.5-install.php，浏览器直接打开  默认Next，到数据库连接这一块要先创建一个数据库，我这里创建一个名为simple的数据库，然后填上数据库连接信息  填写管理账号密码信息  填写可写可读的目录和选择语言  安装完成，除了邮件模块，不过也用不上。   0x03 漏洞复现过程  登录后台   选择File Manager   编写一个文件名为a.txt内容为&amp;lt;?php phpinfo();?&amp;gt;的文件，然后点击上传。   选中a.txt，点击copy,名字改为rce.php,然后确定   文件就copy过来了，有点类似系统的copy命令。   访问rce.php   0x04 漏洞分析过程  还记得上一篇的phpok的分析，如果找不出关键文件，可以抓包分析。 可以看到主要是通过文件admin/moduleinterface.php文件进行操作的。 可能这样看会让人很乱，我们可以用phpstorm的debug来调试整个过程 相关配置可以看https://getpass.cn/2018/04/10/Breakpoint%20debugging%20with%20phpstorm+xdebug/ 从上面的抓包可以看出来，mact参数是FileManager，m1_是fileaction，大家可以去这里下断点然后一步一步分析整个流程。  有经验可以看出来，FileManager就是modules\FileManager目录，fileaction就是modules/FileManager/action.fileaction.php文件，再往下看代码的68行，可以看到我们的copy操作的代码。  if (isset($params[&amp;#34;fileactioncopy&amp;#34;]) || $fileaction==&amp;#34;copy&amp;#34;) { include_once(__DIR__.&amp;#34;/action.copy.php&amp;#34;); return; }  我们找到这个文件action.copy.php，我们在93行下一个断点，然后去操作copy，可以看到有各种很详细的参数信息。  我们F7单步走，可以看到执行$res = copy($src,$dest);的时候没有发生错误。  这样就正式完成了所有操作，如有不懂可以看下官方文档的copy函数的用法http://www.php.net/manual/en/function.copy.php  0x05 漏洞脚本 python版本 # Exploit Title: CMS Made Simple 2.</description>
    </item>
    
    <item>
      <title>phpok4.9后台getshell(每周一洞)</title>
      <link>https://getshe11.com/post/phpok4.9-background-getshell/</link>
      <pubDate>Mon, 06 Aug 2018 08:19:40 +0000</pubDate>
      
      <guid>https://getshe11.com/post/phpok4.9-background-getshell/</guid>
      <description>0x01 前言 昨天看到phpok可以申请cve就去审计了一下，存在漏洞的地方还是挺多的，时间不多找了个简单的任意文件上传漏洞。
0x02 环境  程序下载：https://www.lanzous.com/i1ksjkd 集成环境是PHPstudy,PHP5.6。 安装程序   4. 先创建一个数据库phpok 5. 设置管理员账号密码 6. 安装成功 0x03 漏洞挖掘过程   打开打开FolderChangesView记录程序的文件变动。   登录后台 程序升级-&amp;gt;压缩包升级   编辑一个测试文件phpinfo.php,压缩为phpinfo.zip上传。   点击上传，压缩包里面的文件会被压缩到网站根目录   访问根目录下新生成的文件   0x04 漏洞分析 漏洞代码出现在framework/admin/update_control.php文件的unzip_f函数,可以看到用到lib里面的phpzip类，有兴趣可以去读下源码framework/libs/phpzip.php 大家可能疑问你怎么知道漏洞文件是这个，可以抓包来查看整过利用的过程，然后再去源码分析。 public function unzip_f() { $zipfile = $this-&amp;gt;get(&amp;#39;zipfile&amp;#39;); if(!$zipfile){ $this-&amp;gt;error(P_Lang(&amp;#39;未指定附件文件&amp;#39;)); } if(strpos($zipfile,&amp;#39;..&amp;#39;) !== false){ $this-&amp;gt;error(P_Lang(&amp;#39;不支持带..上级路径&amp;#39;)); } if(!file_exists($this-&amp;gt;dir_root.$zipfile)){ $this-&amp;gt;error(P_Lang(&amp;#39;ZIP文件不存在&amp;#39;)); } $this-&amp;gt;lib(&amp;#39;phpzip&amp;#39;)-&amp;gt;unzip($this-&amp;gt;dir_root.$zipfile,&amp;#39;data/update/&amp;#39;); $info = $this-&amp;gt;update_load(); if(!$info || (is_array($info) &amp;amp;&amp;amp; $info[&amp;#39;status&amp;#39;] == &amp;#39;error&amp;#39;)){ $this-&amp;gt;error($info[&amp;#39;content&amp;#39;]); } $this-&amp;gt;success(); } 可以看到用到lib里面的phpzip类，有兴趣可以去读下源码framework/libs/phpzip.</description>
    </item>
    
    <item>
      <title>phpok 4.9代码审计(每周一洞)</title>
      <link>https://getshe11.com/post/phpok-4.9-code-audit/</link>
      <pubDate>Sun, 05 Aug 2018 14:54:07 +0000</pubDate>
      
      <guid>https://getshe11.com/post/phpok-4.9-code-audit/</guid>
      <description>0x01 前言 一放暑假就特别多事情，很多事情都耽误了，看吐司文章看到一篇不错的审计文章，就学习下。
0x02 环境搭建 环境没什么要求PHPstudy就能搞定，这个要先创建数据库再安装程序的。
0x03 任意文件上传漏洞 漏洞复现  登录后台，点击模块管理   新建一个测试文件然后压缩  然后导入模块 可以看到已经上传到了/data/cache/的目录下面了：  访问文件   漏洞分析 漏洞代码在framework/admin/modulec_control.php 642行。 大家可以详细的分析这个流程，主要漏洞的代码是 $this-&amp;gt;lib(&#39;phpzip&#39;)-&amp;gt;unzip($this-&amp;gt;dir_root.$zipfile,$this-&amp;gt;dir_root.&#39;data/cache/&#39;); 没有做任何的过滤，直接把zip原样解压缩到/data/cache/的目录下面。
/** * 模块导入 * @变量 zipfile 指定的ZIP文件地址 **/ public function import_f() { $zipfile = $this-&amp;gt;get(&amp;#39;zipfile&amp;#39;); if(!$zipfile){ $this-&amp;gt;lib(&amp;#39;form&amp;#39;)-&amp;gt;cssjs(array(&amp;#39;form_type&amp;#39;=&amp;gt;&amp;#39;upload&amp;#39;)); $this-&amp;gt;addjs(&amp;#39;js/webuploader/admin.upload.js&amp;#39;); $this-&amp;gt;view(&amp;#39;module_import&amp;#39;); } if(strpos($zipfile,&amp;#39;..&amp;#39;) !== false){ $this-&amp;gt;error(P_Lang(&amp;#39;不支持带..上级路径&amp;#39;)); } if(!file_exists($this-&amp;gt;dir_root.$zipfile)){ $this-&amp;gt;error(P_Lang(&amp;#39;ZIP文件不存在&amp;#39;)); } $this-&amp;gt;lib(&amp;#39;phpzip&amp;#39;)-&amp;gt;unzip($this-&amp;gt;dir_root.$zipfile,$this-&amp;gt;dir_root.&amp;#39;data/cache/&amp;#39;); if(!file_exists($this-&amp;gt;dir_root.&amp;#39;data/cache/module.xml&amp;#39;)){ $this-&amp;gt;error(P_Lang(&amp;#39;导入模块失败，请检查解压缩是否成功&amp;#39;)); } $rs = $info = $this-&amp;gt;lib(&amp;#39;xml&amp;#39;)-&amp;gt;read($this-&amp;gt;dir_root.&amp;#39;data/cache/module.xml&amp;#39;,true); if(!$rs){ $this-&amp;gt;error(P_Lang(&amp;#39;XML内容解析异常&amp;#39;)); } $tmp = $rs; if(isset($tmp[&amp;#39;_fields&amp;#39;])){ unset($tmp[&amp;#39;_fields&amp;#39;]); } $insert_id = $this-&amp;gt;model(&amp;#39;module&amp;#39;)-&amp;gt;save($tmp); if(!</description>
    </item>
    
    <item>
      <title>DedeCMS V5.7后台过滤不当导致Getshell(每周一洞)</title>
      <link>https://getshe11.com/post/dedecms-v5.7-background-filtering-improperly-leads-to-getshell/</link>
      <pubDate>Fri, 27 Jul 2018 14:14:56 +0000</pubDate>
      
      <guid>https://getshe11.com/post/dedecms-v5.7-background-filtering-improperly-leads-to-getshell/</guid>
      <description>0x01 前言 前两天看到七月火表哥再先知发的一篇审计文章，感觉不错，是dedecms的getshell。就分析了一下，顺便写一篇文章学习。
0x02 环境 环境和之前的一篇文章一样可以作为参考： https://getpass.cn/2018/03/10/DedeCMS%20V5.7%20SP2%20Background%20Getshell%20Code%20Execution%20Vulnerability/
0x03 复现漏洞  进入后台添加广告的地方：http://sb.com/dede/ad_main.php 在添加页面加上我们的代码：--&amp;gt;&amp;lt;?php phpinfo();?&amp;gt;&amp;lt;!--  然后点击查看代码  访问执行代码   0x04 漏洞分析 dede\ad_add.php,代码可以读一遍，插入数据库的时候并没有对危险函数进行处理。
if($dopost==&amp;#34;save&amp;#34;) { csrf_check(); //timeset tagname typeid normbody expbody  $tagname = trim($tagname); $row = $dsql-&amp;gt;GetOne(&amp;#34;SELECT typeid FROM #@__myad WHERE typeid=&amp;#39;$typeid&amp;#39; AND tagname LIKE &amp;#39;$tagname&amp;#39;&amp;#34;); if(is_array($row)) { ShowMsg(&amp;#34;在相同栏目下已经存在同名的标记！&amp;#34;,&amp;#34;-1&amp;#34;); exit(); } $starttime = GetMkTime($starttime); $endtime = GetMkTime($endtime); $link = addslashes($normbody[&amp;#39;link&amp;#39;]); if($normbody[&amp;#39;style&amp;#39;]==&amp;#39;code&amp;#39;) { $normbody = addslashes($normbody[&amp;#39;htmlcode&amp;#39;]); } else if($normbody[&amp;#39;style&amp;#39;]==&amp;#39;txt&amp;#39;) { $normbody = &amp;#34;&amp;lt;a href=\&amp;#34;{$link}\&amp;#34;font-size=\&amp;#34;{$normbody[&amp;#39;size&amp;#39;]}\&amp;#34;color=\&amp;#34;{$normbody[&amp;#39;color&amp;#39;]}\&amp;#34;&amp;gt;{$normbody[&amp;#39;title&amp;#39;]}&amp;lt;/a&amp;gt;&amp;#34;; } else if($normbody[&amp;#39;style&amp;#39;]==&amp;#39;img&amp;#39;) { if(empty($normbody[&amp;#39;width&amp;#39;])) { $width = &amp;#34;&amp;#34;; } else { $width = &amp;#34; width=\&amp;#34;{$normbody[&amp;#39;width&amp;#39;]}\&amp;#34;&amp;#34;; } if (empty($normbody[&amp;#39;height&amp;#39;])) { $height = &amp;#34;&amp;#34;; } else { $height = &amp;#34;height=\&amp;#34;{$normbody[&amp;#39;height&amp;#39;]}\&amp;#34;&amp;#34;; } $normbody = &amp;#34;&amp;lt;a href=\&amp;#34;{$link}\&amp;#34;&amp;gt;&amp;lt;img src=\&amp;#34;{$normbody[&amp;#39;url&amp;#39;]}\&amp;#34;$width$heightborder=\&amp;#34;0\&amp;#34;/&amp;gt;&amp;lt;/a&amp;gt;&amp;#34;; } else { if(empty($normbody[&amp;#39;width&amp;#39;])) { $width = &amp;#34;&amp;#34;; } else { $width = &amp;#34; width=\&amp;#34;{$normbody[&amp;#39;width&amp;#39;]}\&amp;#34;&amp;#34;; } if (empty($normbody[&amp;#39;height&amp;#39;])) { $height = &amp;#34;&amp;#34;; } else { $height = &amp;#34;height=\&amp;#34;{$normbody[&amp;#39;height&amp;#39;]}\&amp;#34;&amp;#34;; } $normbody = &amp;#34;&amp;lt;object classid=\&amp;#34;clsid:D27CDB6E-AE6D-11cf-96B8-444553540000\&amp;#34;codebase=\&amp;#34;http://download.</description>
    </item>
    
    <item>
      <title>HDWiki v6.0最新版referer注入漏洞(每周一洞)</title>
      <link>https://getshe11.com/post/hdwiki-v6.0_latest_version_of_referer_injection_vulnerability/</link>
      <pubDate>Sun, 22 Jul 2018 17:13:30 +0000</pubDate>
      
      <guid>https://getshe11.com/post/hdwiki-v6.0_latest_version_of_referer_injection_vulnerability/</guid>
      <description>0x01 前言 经拖稿一个月了，差了四篇文章没补回来， 现在都补上，虽然说这样没有坚持的按时写下去，但是只要记得要做这个事情就行了，不能中途而废。这个漏洞比较鸡肋，搁现在估计都没戏了，但是这个漏洞的思路可以学习下，积累经验。
0x02 环境搭建 6.0可以在官网下载：http://kaiyuan.hudong.com/download/ 在文章底部也会附上源码，搭建就不详细说明了，在我的其他文章也有搭建的详细步骤。用到的集成环境是PHPstudy，PHP版本是5.3，开启GPC。
0x03 漏洞利用 1. 注册账号 http://sb.com/index.php?user-register
2. 截获数据包 http://sb.com/index.php?user-login, 用burp或者其他工具截取数据包。
3. 执行Payload 在数据包下面加上referer：referer:&#39; where if((substr((select password from wiki_user where username=&#39;admin&#39;),1,1))=&#39;e&#39;,sleep(5),0)# 看到burp的右下角时间比没有加上payload的时候多了5s，证明漏洞利用成功。
0x04 漏洞分析 文件control/user.php的110行dologin()函数，为什么要登录用户才有效呢，因为$_ENV[&#39;user&#39;]这里检测了cookies，所以没有用户登录是不能执行不成功的。想了解的可以进去读一下这个代码，主要存在注入的地方是在$_ENV[&#39;user&#39;]-&amp;gt;add_referer();这里。
function dologin(){ $_ENV[&amp;#39;user&amp;#39;]-&amp;gt;passport_server(&amp;#39;login&amp;#39;,&amp;#39;1&amp;#39;); if(!isset($this-&amp;gt;post[&amp;#39;submit&amp;#39;])){ $this-&amp;gt;view-&amp;gt;assign(&amp;#39;checkcode&amp;#39;,isset($this-&amp;gt;setting[&amp;#39;checkcode&amp;#39;])?$this-&amp;gt;setting[&amp;#39;checkcode&amp;#39;]:0); $_ENV[&amp;#39;user&amp;#39;]-&amp;gt;add_referer(); $_ENV[&amp;#39;user&amp;#39;]-&amp;gt;passport_server(&amp;#39;login&amp;#39;,&amp;#39;2&amp;#39;); $_ENV[&amp;#39;user&amp;#39;]-&amp;gt;passport_client(&amp;#39;login&amp;#39;); if (!isset($this-&amp;gt;setting[&amp;#39;name_min_length&amp;#39;])) {$this-&amp;gt;setting[&amp;#39;name_min_length&amp;#39;] = 3;} if (!isset($this-&amp;gt;setting[&amp;#39;name_max_length&amp;#39;])) {$this-&amp;gt;setting[&amp;#39;name_max_length&amp;#39;] = 15;} $loginTip2 = str_replace(array(&amp;#39;3&amp;#39;,&amp;#39;15&amp;#39;),array($this-&amp;gt;setting[&amp;#39;name_min_length&amp;#39;],$this-&amp;gt;setting[&amp;#39;name_max_length&amp;#39;]),$this-&amp;gt;view-&amp;gt;lang[&amp;#39;loginTip2&amp;#39;]); $this-&amp;gt;view-&amp;gt;assign(&amp;#39;name_min_length&amp;#39;,$this-&amp;gt;setting[&amp;#39;name_min_length&amp;#39;]); $this-&amp;gt;view-&amp;gt;assign(&amp;#39;name_max_length&amp;#39;,$this-&amp;gt;setting[&amp;#39;name_max_length&amp;#39;]); $this-&amp;gt;view-&amp;gt;assign(&amp;#39;loginTip2&amp;#39;,$loginTip2); //$this-&amp;gt;view-&amp;gt;display(&amp;#39;login&amp;#39;); 	$_ENV[&amp;#39;block&amp;#39;]-&amp;gt;view(&amp;#39;login&amp;#39;); }else{ 继续跟进add_referer()函数的分析，model\user.class.php的41行，这里判断了HTTP_REFERER是否为真然后执行下面内容，可以看到把$_SERVER[&#39;HTTP_REFERER&#39;]带入UPDATE语句，但是有一个haddslashes函数的过滤。
function add_referer(){ if($_SERVER[&amp;#39;HTTP_REFERER&amp;#39;]){ $this-&amp;gt;db-&amp;gt;query(&amp;#34;UPDATE &amp;#34;.DB_TABLEPRE.&amp;#34;session SET referer =&amp;#39;&amp;#34;.string::haddslashes($_SERVER[&amp;#39;HTTP_REFERER&amp;#39;]).&amp;#34;&amp;#39; WHERE sid=&amp;#39;&amp;#34;.base::hgetcookie(&amp;#39;sid&amp;#39;).&amp;#34;&amp;#39;&amp;#34;); } } 我们进入haddslashes()函数，在lib\string.</description>
    </item>
    
    <item>
      <title>Thinkphp框架 3.2.x sql注入漏洞分析(每周一洞)</title>
      <link>https://getshe11.com/post/thinkphp-framework-3.2.x-sql-injection-vulnerability-analysis/</link>
      <pubDate>Wed, 18 Apr 2018 15:20:50 +0000</pubDate>
      
      <guid>https://getshe11.com/post/thinkphp-framework-3.2.x-sql-injection-vulnerability-analysis/</guid>
      <description>0x01 前言 Thinkphp 3.2.x用的也挺多的，以前的程序大部分都是用这边版本的，如果移动到2版本又挺麻烦，而且小程序不说，大程序就复杂很多了。
这次的漏洞是出现在WHERE这这个地方。
0x02 环境搭建和漏洞复现 程序下载地址：http://www.thinkphp.cn/donate/download/id/610.html PHPstudy：Apache+php7.1+MySQL 工具：PHPstorm
 首先建立一个数据库名为：thinkphp 建立一个表名为：user 添加两个字段：name,pass   thinkphp3.2版本和之前的5版本略有不同，它的数据库信息文件是在 这个文件：thinkphp/ThinkPHP/Conf/convention.php 在这里面填上我们刚才建立的数据库信息:   打开thinkphp的调试模式： 在刚才的文件：thinkphp/ThinkPHP/Conf/convention.php 然后修改为true： &#39;SHOW_ERROR_MSG&#39; =&amp;gt; true, // 显示错误信息
  这个3.2版本的控制器位置又是和5版本有点区别。具体的可以在本文的参考链接详细查看thinkphp3.2版本的开发手册。 文件位置：thinkphp/Application/Home/Controller/IndexController.class.php 在里面写一个简单的update的例子：
  &amp;lt;?php namespace Home\Controller; use Think\Controller; class IndexController extends Controller { public function index() { $tj[&amp;#39;name&amp;#39;] = I(&amp;#39;name&amp;#39;); $data[&amp;#39;pass&amp;#39;] = &amp;#39;111111&amp;#39;; $res = M(&amp;#34;user&amp;#34;)-&amp;gt;where($tj)-&amp;gt;save($data); } } I函数和5版本的input助手函数差不多，具体可以看：http://document.thinkphp.cn/manual_3_2.html#input_var
因为我们仅仅执行基本的CURD操作，所以用M方法来实例化数据库对象就行了。 实例化模型可以看：http://document.thinkphp.cn/manual_3_2.html#model_instance 7. 那么现在就开始执行我们的Payload： http://127.0.0.1/thinkphp/index.php?name[0]=bind&amp;amp;name[1]=0 and updatexml(2,concat(0x7e,user()),0)
0x03 漏洞分析  这里也是用phpstorm+debug进行动态分析，配置方法在我上一篇的5版本注入文章里面也写过了，如有不懂可以去查阅。 我们先在I函数这里下一个断点，看下I函数有没有过滤掉我们的输入。   然后访问我们payload，它会跳到入口文件，我们只要分析的是I函数执行的地方，所以我们直接F8跳到执行I函数地方： 2.</description>
    </item>
    
  </channel>
</rss>
