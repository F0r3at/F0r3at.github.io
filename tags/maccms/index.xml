<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Maccms on F0rmat的博客 | 专注于网络攻防和信息安全</title>
    <link>https://getshe11.com/tags/maccms/</link>
    <description>Recent content in Maccms on F0rmat的博客 | 专注于网络攻防和信息安全</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Sun, 22 Dec 2019 11:17:18 +0000</lastBuildDate><atom:link href="https://getshe11.com/tags/maccms/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Maccms8最新命令执行漏洞</title>
      <link>https://getshe11.com/post/maccms8-latest-command-execution-vulnerability/</link>
      <pubDate>Sun, 22 Dec 2019 11:17:18 +0000</pubDate>
      
      <guid>https://getshe11.com/post/maccms8-latest-command-execution-vulnerability/</guid>
      <description>0x01 前言 太久太久没写文章。。。最近还发布了一些法律，许多网站都关了，我还在考虑是否去开这个博客，因为分享技术还得承担法律责任，不过不会再公布具有攻击性的工具或者exp。
这个maccms的RCE是最近被绕过了，写一篇分析文。环境搭建的也不多写了，之前写的一篇Maccms的sql注入http://getshe11.com/2018/08/26/Maccms-sql-injection-analysis/ 有讲到 本文用到的源码可以去https://github.com/yaofeifly/Maccms8.x 这里下载 绕过的源码可以去https://github.com/magicblack/maccms8 下载
0x02 漏洞复现   https://github.com/yaofeifly/Maccms8.x 下载搭建好之后
  用hackbar
  url：http://127.0.0.1/maccms888/?m=vod-search
post：wd={if-A:phpinfo()}{endif-A}
 可以看到phpinfo执行了
  0x03 漏洞分析 phpstorm调试走起，我忽略掉一些步骤，比如怎么用phpstorm调试 这里有写到[Breakpoint debugging with phpstorm+xdebug](http://getshe11.com/2018/04/10/Breakpoint debugging with phpstorm+xdebug/)
这里不下断点直接从开头断下，具体设置在http://getshe11.com/2018/12/22/ThinkPHP5-remote-code-execution-vulnerability-dynamic-analysis/ 有提到。
当执行到require(MAC_ROOT.&#39;/inc/common/360_safe3.php&#39;);我们走进去看下，可以看到匹配规则并没有匹配到我们输入的字符,然后继续往下走了。
到模板内容替换这一块就不跟大家继续走了，大家有时间可以自己走一遍程序的替换流程，我们直接往下走
到这里，我们F7跟进去
F8往下走到eval这里可以看到，除了在接受get、post数据那一块有过滤sql语句的检测，到这里没有任何过滤就直接执行了。
0x04 80w个a绕过匹配漏洞 这个漏洞很有趣，我居然没想到用的是一个P神之前发的一篇文章的PHP利用PCRE回溯次数限制绕过某些安全限制
这个是Maccms8最新的一个版本里面存在，这个也是修复上面的rce的漏洞的版本。
payload：
POST /index.php?m=vod-search HTTP/1.1 Host: xxxx Cache-Control: max-age=0 DNT: 1 Upgrade-Insecure-Requests: 1 User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/79.0.3945.79 Safari/537.</description>
    </item>
    
    <item>
      <title>动态调试|Maccms SQL 注入分析(附注入盲注脚本)</title>
      <link>https://getshe11.com/post/maccms-sql-injection-analysis/</link>
      <pubDate>Sun, 26 Aug 2018 15:49:02 +0000</pubDate>
      
      <guid>https://getshe11.com/post/maccms-sql-injection-analysis/</guid>
      <description>0x01 前言 已经有一周没发表文章了，一个朋友叫我研究maccms的代码审计，碰到这个注入的漏洞挺有趣的，就在此写一篇分析文。
0x02 环境 Web： phpstudy System： Windows 10 X64 Browser： Firefox Quantum Python version ： 2.7 Tools： JetBrains PhpStorm 2018.1.6 x64、Seay代码审计工具
搭建这个程序也挺简单的，也是一步到位。
0x03 漏洞复现  首先在程序的后台添加一条数据  执行我们的payload,可以看到网站跳转延迟了3s以上。 url:http://sb.com/index.php?m=vod-search post:wd=))||if((select%0bascii(length((select(m_name)\`\`from(mac_manager))))=53),(\`sleep\`(3)),0)#%25%35%63  3. 因为是盲注所以注入出管理员的账号密码在下文分析。
0x04 SQL执行过程分析  先弄清楚sql是如何执行的一个过程，然后再去分析怎么会造成SQL注入的一个过程，这样对学习代码审计也是一个好处。 因为是动态分析，不会的安装调试环境的请到这篇文章按步骤完成安装https://getpass.cn/2018/04/10/Breakpoint%20debugging%20with%20phpstorm+xdebug/ phpstorm打开这个选项，意思就是断在当前脚本文件的第一行，我就不下断点了，跟着它执行的过程走一遍。  我们先随便输入一点数据 访问后会断在index.php的第一行  F8往下走，走到第14行F7跟进去。 然后F8一直往下走，可以看到拦截的规则 走到POST的过滤这里F7进去 arr_foreach函数检查传过来的值是否是数组，不是数组就返回原数据，然后用urldecode函数URL解码。 最后分别对传过来的wd和test两个值进行匹配，如果存在拦截规则里面的字符就跳转到错误信息。 比如你输入wd=/**/就会被拦截 因为/**/存在拦截的正则表达式里面。  走出来会到$m = be(&#39;get&#39;,&#39;m&#39;);这里，这里只是对m传过来的vod-search进行addslashes函数的过滤  我怕文章过长，一些不必要的代码自己去细读一遍就行了，F8一直往下周，走到37行F7进去，因为我们传过来的的参数是vod，所以会包含vod.php文件并执行。  因为我们传参是search所以会走到这里，我们可以F7进去看执行的过程。 在这里会经过urldecode函数的解码，一直循环到不能解码为止，然后经过刚才的StopAttack方法的过滤 最后到htmlEncode方法的替换  跳出到vod.php文件后F8走到这里，F7进去看SQL执行的过程。 一直走到markname的值是vod 然后不用管F8继续往下走，走到这里再F7进去 可以看到SQL执行是到这里，下面是执行的语句 SELECT count(*) FROM {pre}vod WHERE 1=1 AND d_hide=0 AND d_type&amp;gt;0 and d_type not in(0) and d_usergroup in(0) AND ( instr(d_name,&#39;test&#39;)&amp;gt;0 or instr(d_subname,&#39;test&#39;)&amp;gt;0 or instr(d_starring,&#39;test&#39;)&amp;gt;0 )    0x05 漏洞分析 上面分析了SQL执行过程，下面分析这个是如何构成SQL注入的。</description>
    </item>
    
  </channel>
</rss>
