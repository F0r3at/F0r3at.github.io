<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>SQL注入 on F0rmat的博客 | 专注于网络攻防和信息安全</title>
    <link>https://getshe11.com/tags/sql%E6%B3%A8%E5%85%A5/</link>
    <description>Recent content in SQL注入 on F0rmat的博客 | 专注于网络攻防和信息安全</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Sun, 26 Aug 2018 15:49:02 +0000</lastBuildDate><atom:link href="https://getshe11.com/tags/sql%E6%B3%A8%E5%85%A5/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>动态调试|Maccms SQL 注入分析(附注入盲注脚本)</title>
      <link>https://getshe11.com/post/maccms-sql-injection-analysis/</link>
      <pubDate>Sun, 26 Aug 2018 15:49:02 +0000</pubDate>
      
      <guid>https://getshe11.com/post/maccms-sql-injection-analysis/</guid>
      <description>0x01 前言 已经有一周没发表文章了，一个朋友叫我研究maccms的代码审计，碰到这个注入的漏洞挺有趣的，就在此写一篇分析文。
0x02 环境 Web： phpstudy System： Windows 10 X64 Browser： Firefox Quantum Python version ： 2.7 Tools： JetBrains PhpStorm 2018.1.6 x64、Seay代码审计工具
搭建这个程序也挺简单的，也是一步到位。
0x03 漏洞复现  首先在程序的后台添加一条数据  执行我们的payload,可以看到网站跳转延迟了3s以上。 url:http://sb.com/index.php?m=vod-search post:wd=))||if((select%0bascii(length((select(m_name)\`\`from(mac_manager))))=53),(\`sleep\`(3)),0)#%25%35%63  3. 因为是盲注所以注入出管理员的账号密码在下文分析。
0x04 SQL执行过程分析  先弄清楚sql是如何执行的一个过程，然后再去分析怎么会造成SQL注入的一个过程，这样对学习代码审计也是一个好处。 因为是动态分析，不会的安装调试环境的请到这篇文章按步骤完成安装https://getpass.cn/2018/04/10/Breakpoint%20debugging%20with%20phpstorm+xdebug/ phpstorm打开这个选项，意思就是断在当前脚本文件的第一行，我就不下断点了，跟着它执行的过程走一遍。  我们先随便输入一点数据 访问后会断在index.php的第一行  F8往下走，走到第14行F7跟进去。 然后F8一直往下走，可以看到拦截的规则 走到POST的过滤这里F7进去 arr_foreach函数检查传过来的值是否是数组，不是数组就返回原数据，然后用urldecode函数URL解码。 最后分别对传过来的wd和test两个值进行匹配，如果存在拦截规则里面的字符就跳转到错误信息。 比如你输入wd=/**/就会被拦截 因为/**/存在拦截的正则表达式里面。  走出来会到$m = be(&#39;get&#39;,&#39;m&#39;);这里，这里只是对m传过来的vod-search进行addslashes函数的过滤  我怕文章过长，一些不必要的代码自己去细读一遍就行了，F8一直往下周，走到37行F7进去，因为我们传过来的的参数是vod，所以会包含vod.php文件并执行。  因为我们传参是search所以会走到这里，我们可以F7进去看执行的过程。 在这里会经过urldecode函数的解码，一直循环到不能解码为止，然后经过刚才的StopAttack方法的过滤 最后到htmlEncode方法的替换  跳出到vod.php文件后F8走到这里，F7进去看SQL执行的过程。 一直走到markname的值是vod 然后不用管F8继续往下走，走到这里再F7进去 可以看到SQL执行是到这里，下面是执行的语句 SELECT count(*) FROM {pre}vod WHERE 1=1 AND d_hide=0 AND d_type&amp;gt;0 and d_type not in(0) and d_usergroup in(0) AND ( instr(d_name,&#39;test&#39;)&amp;gt;0 or instr(d_subname,&#39;test&#39;)&amp;gt;0 or instr(d_starring,&#39;test&#39;)&amp;gt;0 )    0x05 漏洞分析 上面分析了SQL执行过程，下面分析这个是如何构成SQL注入的。</description>
    </item>
    
    <item>
      <title>HDWiki v6.0最新版referer注入漏洞(每周一洞)</title>
      <link>https://getshe11.com/post/hdwiki-v6.0_latest_version_of_referer_injection_vulnerability/</link>
      <pubDate>Sun, 22 Jul 2018 17:13:30 +0000</pubDate>
      
      <guid>https://getshe11.com/post/hdwiki-v6.0_latest_version_of_referer_injection_vulnerability/</guid>
      <description>0x01 前言 经拖稿一个月了，差了四篇文章没补回来， 现在都补上，虽然说这样没有坚持的按时写下去，但是只要记得要做这个事情就行了，不能中途而废。这个漏洞比较鸡肋，搁现在估计都没戏了，但是这个漏洞的思路可以学习下，积累经验。
0x02 环境搭建 6.0可以在官网下载：http://kaiyuan.hudong.com/download/ 在文章底部也会附上源码，搭建就不详细说明了，在我的其他文章也有搭建的详细步骤。用到的集成环境是PHPstudy，PHP版本是5.3，开启GPC。
0x03 漏洞利用 1. 注册账号 http://sb.com/index.php?user-register
2. 截获数据包 http://sb.com/index.php?user-login, 用burp或者其他工具截取数据包。
3. 执行Payload 在数据包下面加上referer：referer:&#39; where if((substr((select password from wiki_user where username=&#39;admin&#39;),1,1))=&#39;e&#39;,sleep(5),0)# 看到burp的右下角时间比没有加上payload的时候多了5s，证明漏洞利用成功。
0x04 漏洞分析 文件control/user.php的110行dologin()函数，为什么要登录用户才有效呢，因为$_ENV[&#39;user&#39;]这里检测了cookies，所以没有用户登录是不能执行不成功的。想了解的可以进去读一下这个代码，主要存在注入的地方是在$_ENV[&#39;user&#39;]-&amp;gt;add_referer();这里。
function dologin(){ $_ENV[&amp;#39;user&amp;#39;]-&amp;gt;passport_server(&amp;#39;login&amp;#39;,&amp;#39;1&amp;#39;); if(!isset($this-&amp;gt;post[&amp;#39;submit&amp;#39;])){ $this-&amp;gt;view-&amp;gt;assign(&amp;#39;checkcode&amp;#39;,isset($this-&amp;gt;setting[&amp;#39;checkcode&amp;#39;])?$this-&amp;gt;setting[&amp;#39;checkcode&amp;#39;]:0); $_ENV[&amp;#39;user&amp;#39;]-&amp;gt;add_referer(); $_ENV[&amp;#39;user&amp;#39;]-&amp;gt;passport_server(&amp;#39;login&amp;#39;,&amp;#39;2&amp;#39;); $_ENV[&amp;#39;user&amp;#39;]-&amp;gt;passport_client(&amp;#39;login&amp;#39;); if (!isset($this-&amp;gt;setting[&amp;#39;name_min_length&amp;#39;])) {$this-&amp;gt;setting[&amp;#39;name_min_length&amp;#39;] = 3;} if (!isset($this-&amp;gt;setting[&amp;#39;name_max_length&amp;#39;])) {$this-&amp;gt;setting[&amp;#39;name_max_length&amp;#39;] = 15;} $loginTip2 = str_replace(array(&amp;#39;3&amp;#39;,&amp;#39;15&amp;#39;),array($this-&amp;gt;setting[&amp;#39;name_min_length&amp;#39;],$this-&amp;gt;setting[&amp;#39;name_max_length&amp;#39;]),$this-&amp;gt;view-&amp;gt;lang[&amp;#39;loginTip2&amp;#39;]); $this-&amp;gt;view-&amp;gt;assign(&amp;#39;name_min_length&amp;#39;,$this-&amp;gt;setting[&amp;#39;name_min_length&amp;#39;]); $this-&amp;gt;view-&amp;gt;assign(&amp;#39;name_max_length&amp;#39;,$this-&amp;gt;setting[&amp;#39;name_max_length&amp;#39;]); $this-&amp;gt;view-&amp;gt;assign(&amp;#39;loginTip2&amp;#39;,$loginTip2); //$this-&amp;gt;view-&amp;gt;display(&amp;#39;login&amp;#39;); 	$_ENV[&amp;#39;block&amp;#39;]-&amp;gt;view(&amp;#39;login&amp;#39;); }else{ 继续跟进add_referer()函数的分析，model\user.class.php的41行，这里判断了HTTP_REFERER是否为真然后执行下面内容，可以看到把$_SERVER[&#39;HTTP_REFERER&#39;]带入UPDATE语句，但是有一个haddslashes函数的过滤。
function add_referer(){ if($_SERVER[&amp;#39;HTTP_REFERER&amp;#39;]){ $this-&amp;gt;db-&amp;gt;query(&amp;#34;UPDATE &amp;#34;.DB_TABLEPRE.&amp;#34;session SET referer =&amp;#39;&amp;#34;.string::haddslashes($_SERVER[&amp;#39;HTTP_REFERER&amp;#39;]).&amp;#34;&amp;#39; WHERE sid=&amp;#39;&amp;#34;.base::hgetcookie(&amp;#39;sid&amp;#39;).&amp;#34;&amp;#39;&amp;#34;); } } 我们进入haddslashes()函数，在lib\string.</description>
    </item>
    
    <item>
      <title>Thinkphp框架 3.2.x sql注入漏洞分析(每周一洞)</title>
      <link>https://getshe11.com/post/thinkphp-framework-3.2.x-sql-injection-vulnerability-analysis/</link>
      <pubDate>Wed, 18 Apr 2018 15:20:50 +0000</pubDate>
      
      <guid>https://getshe11.com/post/thinkphp-framework-3.2.x-sql-injection-vulnerability-analysis/</guid>
      <description>0x01 前言 Thinkphp 3.2.x用的也挺多的，以前的程序大部分都是用这边版本的，如果移动到2版本又挺麻烦，而且小程序不说，大程序就复杂很多了。
这次的漏洞是出现在WHERE这这个地方。
0x02 环境搭建和漏洞复现 程序下载地址：http://www.thinkphp.cn/donate/download/id/610.html PHPstudy：Apache+php7.1+MySQL 工具：PHPstorm
 首先建立一个数据库名为：thinkphp 建立一个表名为：user 添加两个字段：name,pass   thinkphp3.2版本和之前的5版本略有不同，它的数据库信息文件是在 这个文件：thinkphp/ThinkPHP/Conf/convention.php 在这里面填上我们刚才建立的数据库信息:   打开thinkphp的调试模式： 在刚才的文件：thinkphp/ThinkPHP/Conf/convention.php 然后修改为true： &#39;SHOW_ERROR_MSG&#39; =&amp;gt; true, // 显示错误信息
  这个3.2版本的控制器位置又是和5版本有点区别。具体的可以在本文的参考链接详细查看thinkphp3.2版本的开发手册。 文件位置：thinkphp/Application/Home/Controller/IndexController.class.php 在里面写一个简单的update的例子：
  &amp;lt;?php namespace Home\Controller; use Think\Controller; class IndexController extends Controller { public function index() { $tj[&amp;#39;name&amp;#39;] = I(&amp;#39;name&amp;#39;); $data[&amp;#39;pass&amp;#39;] = &amp;#39;111111&amp;#39;; $res = M(&amp;#34;user&amp;#34;)-&amp;gt;where($tj)-&amp;gt;save($data); } } I函数和5版本的input助手函数差不多，具体可以看：http://document.thinkphp.cn/manual_3_2.html#input_var
因为我们仅仅执行基本的CURD操作，所以用M方法来实例化数据库对象就行了。 实例化模型可以看：http://document.thinkphp.cn/manual_3_2.html#model_instance 7. 那么现在就开始执行我们的Payload： http://127.0.0.1/thinkphp/index.php?name[0]=bind&amp;amp;name[1]=0 and updatexml(2,concat(0x7e,user()),0)
0x03 漏洞分析  这里也是用phpstorm+debug进行动态分析，配置方法在我上一篇的5版本注入文章里面也写过了，如有不懂可以去查阅。 我们先在I函数这里下一个断点，看下I函数有没有过滤掉我们的输入。   然后访问我们payload，它会跳到入口文件，我们只要分析的是I函数执行的地方，所以我们直接F8跳到执行I函数地方： 2.</description>
    </item>
    
    <item>
      <title>Thinkphp框架 &lt; 5.0.16 sql注入漏洞分析(每日一洞)</title>
      <link>https://getshe11.com/post/thinkphp-framework-_-5.0.16-sql-injection-vulnerability-analysis/</link>
      <pubDate>Wed, 11 Apr 2018 09:34:29 +0000</pubDate>
      
      <guid>https://getshe11.com/post/thinkphp-framework-_-5.0.16-sql-injection-vulnerability-analysis/</guid>
      <description>0x01 前言 前天在公众号看到石大神发的一篇审计thinkphp的文章,就想写一个分析流程，delay到了今天。昨天在先知也看到了chybeta发的一篇分析文章感觉也不错。分析过程，我也会做thinkphp部分功能的解析。 废话不多说，开始吧！
0x02 环境搭建和漏洞复现 程序下载地址：http://www.thinkphp.cn/down/1126.html PHPstudy：Apache+php5.6+MySQL 工具：PHPstorm
 首先建立一个数据库名为：thinkphp 建立一个表名为：user 添加三个字段：id,name,password   在thinkphp的数据库文件填上刚才我们建立的数据库信息： 文件位置：\thinkphp\application\database.php  打开thinkphp的调试模式： 文件位置：\thinkphp\application\config.php  简单写一个update功能，石大神用到了模型，这里就简单写一个例子就行了。 文件位置：\thinkphp\application\index\controller\Index.php  &amp;lt;?php namespace app\index\controller; class Index { public function index() { $password = input(&amp;#39;get.password/a&amp;#39;); db(&amp;#39;user&amp;#39;)-&amp;gt;where([&amp;#39;id&amp;#39;=&amp;gt; 1])-&amp;gt;update([&amp;#39;password&amp;#39;=&amp;gt;$password]); } } 这里用到了thinkphp的助手函数input()，是专用来接收get，post等的值。具体可以看：https://www.kancloud.cn/manual/thinkphp5/118044 还有就是thinkphp的数据库操作，框架本身写好了我们调用就比较方便。所以为什么那么多人用框架去开发程序，快捷而且安全，不过也会有安全问题，就像今天这个sql漏洞，不过如果是新手的话总比自己写的好对吧哈。 具体可以看链接：https://www.kancloud.cn/manual/thinkphp5/135178 7. 现在就可以访问我们的payload了：
http://thinkphp.test/thinkphp/public/index.php?password[0]=inc&amp;amp;password[1]=updatexml(2,concat(0x7e,user()),0)&amp;amp;password[2]=1 0x03 漏洞分析  这里用phpstorm+debug来动态分析，有不懂配置的可以访问我写一篇配置文章：利用phpstorm+xdebug进行断点调试 我们在主函数下一断点：   然后访问我们payload，它会跳到入口文件，我们只要分析的是sql执行的地方，所以我们直接F8跳到执行sql地方： 2. 我们继续跟进到loader.php它会包含thinkphp的Db.php文件， 接下还会包\thinkphp\library\think\db\connector\Mysql.php文件，主要是连接数据库的操作，这里就直接跳过了。别分析分析把自己绕进去了，我只是在这里讲诉下过程，我们还是直接分析sql执行的部分吧。 3. 我们跳到update执行的部分，文件位置：\thinkphp\library\think\db\Query.php 继续往下看，这句是执行我们sql的地方： 4. 我们F7跟进去，跳到文件位置\thinkphp\library\think\db\Builder.php parseTable函数直接F8往下执行了，这函数是处理table分析的，主要还是parseData函数,我们继续F7跟进 5. 我们继续往下跟进 我们看到了这里如果传入的值为数组形式的话，并且第一个参数为inc就执行switch所对应的的语句。 可以看到这里函数对我们传入的值没有做任何处理，返回内容仍然是我们的语句： 跟到后面返回的执行sql语句：
执行完，我们跟进到报错的地方，说明我的语句执行成功： 6.</description>
    </item>
    
  </channel>
</rss>
